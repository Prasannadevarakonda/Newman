{
	"info": {
		"_postman_id": "febbe127-57bb-435e-86f1-5fda29380352",
		"name": "GILDA API Automation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14992721"
	},
	"item": [
		{
			"name": "Generate Access Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has a JSON body\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response has an access_token property\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.access_token).to.be.a('string');\r",
							"});\r",
							"\r",
							"var data = pm.response.json();\r",
							"pm.environment.set(\"access_token\", data.access_token);\r",
							"\r",
							"tests[\"status code is 200\"] = responseCode.code == 200;\r",
							"\r",
							"pm.test(\"Access Token\", function () {\r",
							"    var accessToken = pm.environment.get(\"access_token\");\r",
							"    pm.expect(accessToken).to.exist;\r",
							"    pm.expect(accessToken).to.be.a(\"string\");\r",
							"    pm.test(\"Access Token Value: \" + accessToken);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic NGhwZmljN3FyMTRxcTl1MWh0dGk4ZW5yZXY6MWdhOWdwOTY2OHY5ODJuMjZrbWh0MWs4ZjJldmVzM2VmajBnYWdjZmVtbTR1NW1vaTRuZg==",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://grasp-gilda-token.auth.us-west-2.amazoncognito.com/oauth2/token?grant_type=client_credentials&client_id=4hpfic7qr14qq9u1htti8enrev&scope=apiauthidentifier/json.read",
					"protocol": "https",
					"host": [
						"grasp-gilda-token",
						"auth",
						"us-west-2",
						"amazoncognito",
						"com"
					],
					"path": [
						"oauth2",
						"token"
					],
					"query": [
						{
							"key": "grant_type",
							"value": "client_credentials"
						},
						{
							"key": "client_id",
							"value": "4hpfic7qr14qq9u1htti8enrev"
						},
						{
							"key": "scope",
							"value": "apiauthidentifier/json.read"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GILDA Products By Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Replace the {{Product_Id}} placeholder in the request URL\r",
							"var productId = pm.iterationData.get('Product_Id', { sheet: 'Products' });\r",
							"var baseUrl = pm.variables.get('baseUrl');\r",
							"var requestUrl = baseUrl + '/products/' + productId;\r",
							"pm.request.url.update(requestUrl);\r",
							"\r",
							"// Parse the JSON response\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// Get the expected PRODUCT_NAME from the CSV file\r",
							"var expectedProductName = pm.iterationData.get('PRODUCT_NAME', { sheet: 'Products' });\r",
							"\r",
							"// Get the actual PRODUCT_NAME from the JSON response\r",
							"var actualProductName = jsonData.PRODUCT_NAME;\r",
							"\r",
							"console.log('Expected Product Name:', expectedProductName);\r",
							"console.log('Actual Product Name from Response:', actualProductName);\r",
							"\r",
							"// Compare the actual and expected PRODUCT_NAME values\r",
							"pm.test(\"PRODUCT_NAME value matches the expected value\", function () {\r",
							"    pm.expect(actualProductName).to.equal(expectedProductName);\r",
							"});\r",
							"\r",
							"\r",
							"// Get the expected THERAPEUTIC_AREA from the CSV file\r",
							"var expectedTHERAPEUTIC_AREA = pm.iterationData.get('THERAPEUTIC_AREA', { sheet: 'Products' });\r",
							"\r",
							"// Get the actual THERAPEUTIC_AREA from the JSON response\r",
							"var actualTHERAPEUTIC_AREA = jsonData.THERAPEUTIC_AREA;\r",
							"\r",
							"console.log('Expected THERAPEUTIC_AREA:', expectedProductName);\r",
							"console.log('Actual THERAPEUTIC_AREA from Response:', actualProductName);\r",
							"\r",
							"// Compare the actual and expected PRODUCT_NAME values\r",
							"pm.test(\"THERAPEUTIC_AREA value matches the expected value\", function () {\r",
							"    pm.expect(actualTHERAPEUTIC_AREA).to.equal(expectedTHERAPEUTIC_AREA);\r",
							"});\r",
							"\r",
							"\r",
							"// Get the expected PRODUCT_LINE from the CSV file\r",
							"var expectedPRODUCT_LINE = pm.iterationData.get('PRODUCT_LINE', { sheet: 'Products' });\r",
							"\r",
							"// Get the actual PRODUCT_LINE from the JSON response\r",
							"var actualPRODUCT_LINE = jsonData.PRODUCT_LINE;\r",
							"\r",
							"console.log('Expected PRODUCT_LINE:', expectedPRODUCT_LINE);\r",
							"console.log('Actual PRODUCT_LINE from Response:', actualPRODUCT_LINE);\r",
							"\r",
							"// Compare the actual and expected PRODUCT_NAME values\r",
							"pm.test(\"PRODUCT_LINE value matches the expected value\", function () {\r",
							"    pm.expect(actualPRODUCT_LINE).to.equal(expectedPRODUCT_LINE);\r",
							"});\r",
							"\r",
							"\r",
							"// Get the expected PRODUCT_STAGE from the CSV file\r",
							"var expectedPRODUCT_STAGE = pm.iterationData.get('PRODUCT_STAGE', { sheet: 'Products' });\r",
							"\r",
							"// Get the actual PRODUCT_STAGE from the JSON response\r",
							"var actualPRODUCT_STAGE = jsonData.PRODUCT_STAGE;\r",
							"\r",
							"console.log('Expected PRODUCT_STAGE:', expectedPRODUCT_LINE);\r",
							"console.log('Actual PRODUCT_STAGE from Response:', actualPRODUCT_STAGE);\r",
							"\r",
							"// Compare the actual and expected PRODUCT_NAME values\r",
							"pm.test(\"PRODUCT_STAGE value matches the expected value\", function () {\r",
							"    pm.expect(actualPRODUCT_STAGE).to.equal(expectedPRODUCT_STAGE);\r",
							"});\r",
							"\r",
							"\r",
							"// Get the expected PRODUCT_CODE from the CSV file\r",
							"var expectedPRODUCT_CODE= pm.iterationData.get('PRODUCT_CODE', { sheet: 'Products' });\r",
							"\r",
							"// Get the actual PRODUCT_CODE from the JSON response\r",
							"var actualPRODUCT_CODE = jsonData.PRODUCT_CODE;\r",
							"\r",
							"console.log('Expected PRODUCT_CODE:', expectedPRODUCT_CODE);\r",
							"console.log('Actual PRODUCT_STAGE from Response:', actualPRODUCT_CODE);\r",
							"\r",
							"// Compare the actual and expected PRODUCT_CODE values\r",
							"pm.test(\"PRODUCT_CODE value matches the expected value\", function () {\r",
							"    pm.expect(actualPRODUCT_CODE).to.equal(expectedPRODUCT_CODE);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// Get the expected PCODE_ID from the CSV file\r",
							"var expectedPCODE_ID= pm.iterationData.get('PCODE_ID', { sheet: 'Products' });\r",
							"\r",
							"// Get the actual PCODE_ID from the JSON response\r",
							"var actualPCODE_ID = jsonData.PCODE_ID;\r",
							"\r",
							"console.log('Expected PCODE_ID:', expectedPCODE_ID);\r",
							"console.log('Actual PCODE_ID from Response:', actualPCODE_ID);\r",
							"\r",
							"// Compare the actual and expected PCODE_ID values\r",
							"pm.test(\"PCODE_ID value matches the expected value\", function () {\r",
							"    pm.expect(actualPCODE_ID).to.equal(expectedPCODE_ID);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// Get the expected INDICATION from the CSV file\r",
							"var expectedINDICATION= pm.iterationData.get('INDICATION', { sheet: 'Products' });\r",
							"\r",
							"// Get the actual INDICATION from the JSON response\r",
							"var actualINDICATION = jsonData.INDICATION;\r",
							"\r",
							"console.log('Expected INDICATION:', expectedINDICATION);\r",
							"console.log('Actual INDICATION from Response:', actualINDICATION);\r",
							"\r",
							"// Compare the actual and expected INDICATION values\r",
							"pm.test(\"INDICATION value matches the expected value\", function () {\r",
							"    pm.expect(actualINDICATION).to.equal(expectedINDICATION);\r",
							"});\r",
							"\r",
							"// Get the expected GSCODE from the CSV file\r",
							"var expectedGSCODE= pm.iterationData.get('GSCODE', { sheet: 'Products' });\r",
							"\r",
							"// Get the actual GSCODE from the JSON response\r",
							"var actualGSCODE = jsonData.GSCODE;\r",
							"\r",
							"console.log('Expected GSCODE:', expectedGSCODE);\r",
							"console.log('Actual GSCODE from Response:', actualGSCODE);\r",
							"\r",
							"// Compare the actual and expected GSCODE values\r",
							"pm.test(\"GSCODE value matches the expected value\", function () {\r",
							"    pm.expect(actualGSCODE).to.equal(expectedGSCODE);\r",
							"});\r",
							"\r",
							"\r",
							"// Get the expected IND_NUM from the CSV file\r",
							"var expectedIND_NUM= pm.iterationData.get('IND_NUM', { sheet: 'Products' });\r",
							"\r",
							"// Get the actual IND_NUM from the JSON response\r",
							"var actualIND_NUM = jsonData.IND_NUM;\r",
							"\r",
							"console.log('Expected IND_NUM:', expectedGSCODE);\r",
							"console.log('Actual IND_NUM from Response:', actualIND_NUM);\r",
							"\r",
							"// Compare the actual and expected IND_NUM values\r",
							"pm.test(\"IND_NUM value matches the expected value\", function () {\r",
							"    pm.expect(actualIND_NUM).to.equal(expectedIND_NUM);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "User-token",
						"value": "{[access_token]}",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{baseURL}}/products/{{Product_Id}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products",
						"{{Product_Id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GILDA Products By Id -Invalid Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"try {\r",
							"    pm.test(\"Test results\", function () {\r",
							"        pm.response.to.have.status(400);\r",
							"        const statusCode = pm.response.code;\r",
							"        pm.test(\"Status code: \" + statusCode, function () {\r",
							"            pm.expect(statusCode).to.equal(400);\r",
							"        });\r",
							"    });\r",
							"} catch (error) {\r",
							"    pm.test(\"Test results - Error\", function () {\r",
							"        throw new Error(\"Error: \" + error.message);\r",
							"    });\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "User-token",
						"value": "{[access_token]}",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{baseURL}}/products/0",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "GILDA Product With Paging",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"try {\r",
							"\r",
							"        const statusCode = pm.response.code;\r",
							"        pm.test(\"Status code: \" + statusCode, function () {\r",
							"            pm.expect(statusCode).to.equal(200);\r",
							"        });\r",
							"\r",
							"} catch (error) {\r",
							"    pm.test(\"Test results - Error\", function () {\r",
							"        throw new Error(\"Error: \" + error.message);\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}/products?page_size=20&page_number=4",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products"
					],
					"query": [
						{
							"key": "page_size",
							"value": "20"
						},
						{
							"key": "page_number",
							"value": "4"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GILDA Product With Invalid Paging",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"try {\r",
							"    pm.test(\"Test results\", function () {\r",
							"        pm.response.to.have.status(400);\r",
							"        const statusCode = pm.response.code;\r",
							"        pm.test(\"Status code: \" + statusCode, function () {\r",
							"            pm.expect(statusCode).to.equal(400);\r",
							"        });\r",
							"    });\r",
							"} catch (error) {\r",
							"    pm.test(\"Test results - Error\", function () {\r",
							"        throw new Error(\"Error: \" + error.message);\r",
							"    });\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}/products?page_size=20&page_number=0",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products"
					],
					"query": [
						{
							"key": "page_size",
							"value": "20"
						},
						{
							"key": "page_number",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GILDA Product With No Paging",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"try {\r",
							"\r",
							"        const statusCode = pm.response.code;\r",
							"        pm.test(\"Status code: \" + statusCode, function () {\r",
							"            pm.expect(statusCode).to.equal(200);\r",
							"        });\r",
							"   } catch (error) {\r",
							"    pm.test(\"Test results - Error\", function () {\r",
							"        throw new Error(\"Error: \" + error.message);\r",
							"    });\r",
							"}\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"    var expectedProductCount = 100;\r",
							"\r",
							"    pm.test(`Number of displayed products is ${expectedProductCount}`, function () {\r",
							"        pm.expect(jsonData.length).to.equal(expectedProductCount);\r",
							"    });\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}/products/",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "GILDA Products -Default 100 products without ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"try {\r",
							"    pm.test(\"Test results\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"        const statusCode = pm.response.code;\r",
							"        pm.test(\"Status code: \" + statusCode, function () {\r",
							"            pm.expect(statusCode).to.equal(200);\r",
							"        });\r",
							"    });\r",
							"} catch (error) {\r",
							"    pm.test(\"Test results - Error\", function () {\r",
							"        throw new Error(\"Error: \" + error.message);\r",
							"    });\r",
							"}\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"    var expectedProductCount = 100;\r",
							"\r",
							"    pm.test(`Number of displayed products is ${expectedProductCount}`, function () {\r",
							"        pm.expect(jsonData.length).to.equal(expectedProductCount);\r",
							"    });\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}/gilda/products/",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"gilda",
						"products",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "GILDA Protocols By Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Replace the {{Protocols_Id}} placeholder in the request URL\r",
							"var protocolsId = pm.iterationData.get('Protocols_Id', { sheet: 'Protocols' });\r",
							"var baseUrl = pm.variables.get('baseUrl');\r",
							"var requestUrl = baseUrl +'/protocols/'+ protocolsId;\r",
							"pm.request.url.update(requestUrl);\r",
							"\r",
							"// Parse the JSON response\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// Get the expected STATUS from the CSV file\r",
							"var expectedSTATUS = pm.iterationData.get('STATUS', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual STATUS from the JSON response\r",
							"var actualSTATUS= jsonData.STATUS;\r",
							"\r",
							"console.log('Expected STATUS:', expectedSTATUS);\r",
							"console.log('Actual STATUS from Response:', actualSTATUS);\r",
							"\r",
							"// Compare the actual and expected STATUS values\r",
							"pm.test(\"STATUS value matches the expected value\", function () {\r",
							"    pm.expect(actualSTATUS).to.equal(expectedSTATUS);\r",
							"});\r",
							"////////////ACTUAL_FPFV///////////\r",
							"// Get the expected ACTUAL_FPFVfrom the CSV file\r",
							"var expectedACTUAL_FPFV= pm.iterationData.get('ACTUAL_FPFV', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual ACTUAL_FPFVfrom the JSON response\r",
							"var actualACTUAL_FPFV= jsonData.ACTUAL_FPFV;\r",
							"\r",
							"console.log('Expected ACTUAL_FPFV:', expectedACTUAL_FPFV);\r",
							"console.log('Actual ACTUAL_FPFV from Response:', actualACTUAL_FPFV);\r",
							"\r",
							"// Compare the actual and expected ACTUAL_FPFVvalues\r",
							"pm.test(\"ACTUAL_FPFVvalue matches the expected value\", function () {\r",
							"    pm.expect(actualACTUAL_FPFV).to.equal(expectedACTUAL_FPFV);\r",
							"});\r",
							"////////////ACTUAL_FPLV///////////\r",
							"// Get the expected ACTUAL_FPLVfrom the CSV file\r",
							"var expectedACTUAL_FPLV= pm.iterationData.get('ACTUAL_FPLV', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual ACTUAL_FPLVfrom the JSON response\r",
							"var actualACTUAL_FPLV= jsonData.ACTUAL_FPLV;\r",
							"\r",
							"console.log('Expected ACTUAL_FPLV:', expectedACTUAL_FPLV);\r",
							"console.log('Actual ACTUAL_FPLV from Response:', actualACTUAL_FPLV);\r",
							"\r",
							"// Compare the actual and expected ACTUAL_FPLVvalues\r",
							"pm.test(\"ACTUAL_FPLVvalue matches the expected value\", function () {\r",
							"    pm.expect(actualACTUAL_FPLV).to.equal(expectedACTUAL_FPLV);\r",
							"});\r",
							"////////////ACTUAL_LPFV///////////\r",
							"// Get the expected ACTUAL_LPFVfrom the CSV file\r",
							"var expectedACTUAL_LPFV= pm.iterationData.get('ACTUAL_LPFV', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual ACTUAL_LPFVfrom the JSON response\r",
							"var actualACTUAL_LPFV= jsonData.ACTUAL_LPFV;\r",
							"\r",
							"console.log('Expected ACTUAL_LPFV:', expectedACTUAL_LPFV);\r",
							"console.log('Actual ACTUAL_LPFV from Response:', actualACTUAL_LPFV);\r",
							"\r",
							"// Compare the actual and expected ACTUAL_LPFVvalues\r",
							"pm.test(\"ACTUAL_LPFVvalue matches the expected value\", function () {\r",
							"    pm.expect(actualACTUAL_LPFV).to.equal(expectedACTUAL_LPFV);\r",
							"});\r",
							"////////////ACTUAL_LPLV///////////\r",
							"// Get the expected ACTUAL_LPLVfrom the CSV file\r",
							"var expectedACTUAL_LPLV= pm.iterationData.get('ACTUAL_LPLV', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual ACTUAL_LPLVfrom the JSON response\r",
							"var actualACTUAL_LPLV= jsonData.ACTUAL_LPLV;\r",
							"\r",
							"console.log('Expected ACTUAL_LPLV:', expectedACTUAL_LPLV);\r",
							"console.log('Actual ACTUAL_LPLV from Response:', actualACTUAL_LPLV);\r",
							"\r",
							"// Compare the actual and expected ACTUAL_LPLVvalues\r",
							"pm.test(\"ACTUAL_LPLVvalue matches the expected value\", function () {\r",
							"    pm.expect(actualACTUAL_LPLV).to.equal(expectedACTUAL_LPLV);\r",
							"});\r",
							"////////////ACTUAL_PRI_ENDPT_LPLV///////////\r",
							"// Get the expected ACTUAL_PRI_ENDPT_LPLVfrom the CSV file\r",
							"var expectedACTUAL_PRI_ENDPT_LPLV= pm.iterationData.get('ACTUAL_PRI_ENDPT_LPLV', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual ACTUAL_PRI_ENDPT_LPLVfrom the JSON response\r",
							"var actualACTUAL_PRI_ENDPT_LPLV= jsonData.ACTUAL_PRI_ENDPT_LPLV;\r",
							"\r",
							"console.log('Expected ACTUAL_PRI_ENDPT_LPLV:', expectedACTUAL_PRI_ENDPT_LPLV);\r",
							"console.log('Actual ACTUAL_PRI_ENDPT_LPLV from Response:', actualACTUAL_PRI_ENDPT_LPLV);\r",
							"\r",
							"// Compare the actual and expected ACTUAL_PRI_ENDPT_LPLVvalues\r",
							"pm.test(\"ACTUAL_PRI_ENDPT_LPLVvalue matches the expected value\", function () {\r",
							"    pm.expect(actualACTUAL_PRI_ENDPT_LPLV).to.equal(expectedACTUAL_PRI_ENDPT_LPLV);\r",
							"});\r",
							"////////////ADDL_PRODUCTS///////////\r",
							"// Get the expected ADDL_PRODUCTSfrom the CSV file\r",
							"var expectedADDL_PRODUCTS= pm.iterationData.get('ADDL_PRODUCTS', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual ADDL_PRODUCTSfrom the JSON response\r",
							"var actualADDL_PRODUCTS= jsonData.ADDL_PRODUCTS;\r",
							"\r",
							"console.log('Expected ADDL_PRODUCTS:', expectedADDL_PRODUCTS);\r",
							"console.log('Actual ADDL_PRODUCTS from Response:', actualADDL_PRODUCTS);\r",
							"\r",
							"// Compare the actual and expected ADDL_PRODUCTSvalues\r",
							"pm.test(\"ADDL_PRODUCTSvalue matches the expected value\", function () {\r",
							"    pm.expect(actualADDL_PRODUCTS).to.equal(expectedADDL_PRODUCTS);\r",
							"});\r",
							"////////////BA_BE///////////\r",
							"// Get the expected BA_BEfrom the CSV file\r",
							"var expectedBA_BE= pm.iterationData.get('BA_BE', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual BA_BEfrom the JSON response\r",
							"var actualBA_BE= jsonData.BA_BE;\r",
							"\r",
							"console.log('Expected BA_BE:', expectedBA_BE);\r",
							"console.log('Actual BA_BE from Response:', actualBA_BE);\r",
							"\r",
							"// Compare the actual and expected BA_BEvalues\r",
							"pm.test(\"BA_BEvalue matches the expected value\", function () {\r",
							"    pm.expect(actualBA_BE).to.equal(expectedBA_BE);\r",
							"});\r",
							"////////////BLINDED_FLG///////////\r",
							"// Get the expected BLINDED_FLGfrom the CSV file\r",
							"var expectedBLINDED_FLG= pm.iterationData.get('BLINDED_FLG', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual BLINDED_FLGfrom the JSON response\r",
							"var actualBLINDED_FLG= jsonData.BLINDED_FLG;\r",
							"\r",
							"console.log('Expected BLINDED_FLG:', expectedBLINDED_FLG);\r",
							"console.log('Actual BLINDED_FLG from Response:', actualBLINDED_FLG);\r",
							"\r",
							"// Compare the actual and expected BLINDED_FLGvalues\r",
							"pm.test(\"BLINDED_FLG value matches the expected value\", function () {\r",
							"    pm.expect(actualBLINDED_FLG).to.equal(expectedBLINDED_FLG);\r",
							"});\r",
							"////////////BM_FLG///////////\r",
							"// Get the expected BM_FLG from the CSV file\r",
							"var expectedBM_FLG= pm.iterationData.get('BM_FLG', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual BM_FLGfrom the JSON response\r",
							"var actualBM_FLG= jsonData.BM_FLG;\r",
							"\r",
							"console.log('Expected BM_FLG:', expectedBM_FLG);\r",
							"console.log('Actual BM_FLG from Response:', actualBM_FLG);\r",
							"\r",
							"// Compare the actual and expected BM_FLGvalues\r",
							"pm.test(\"BM_FLGvalue matches the expected value\", function () {\r",
							"    pm.expect(actualBM_FLG).to.equal(expectedBM_FLG);\r",
							"});\r",
							"////////////BUDGET_OFFICE///////////\r",
							"// Get the expected BUDGET_OFFICEfrom the CSV file\r",
							"var expectedBUDGET_OFFICE= pm.iterationData.get('BUDGET_OFFICE', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual BUDGET_OFFICEfrom the JSON response\r",
							"var actualBUDGET_OFFICE= jsonData.BUDGET_OFFICE;\r",
							"\r",
							"console.log('Expected BUDGET_OFFICE:', expectedBUDGET_OFFICE);\r",
							"console.log('Actual BUDGET_OFFICE from Response:', actualBUDGET_OFFICE);\r",
							"\r",
							"// Compare the actual and expected BUDGET_OFFICEvalues\r",
							"pm.test(\"BUDGET_OFFICE value matches the expected value\", function () {\r",
							"    pm.expect(actualBUDGET_OFFICE).to.equal(expectedBUDGET_OFFICE);\r",
							"});\r",
							"////////////CLINOPS_STUDY_LEAD///////////\r",
							"// Get the expected CLINOPS_STUDY_LEADfrom the CSV file\r",
							"var expectedCLINOPS_STUDY_LEAD= pm.iterationData.get('CLINOPS_STUDY_LEAD', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual CLINOPS_STUDY_LEADfrom the JSON response\r",
							"var actualCLINOPS_STUDY_LEAD= jsonData.CLINOPS_STUDY_LEAD;\r",
							"\r",
							"console.log('Expected CLINOPS_STUDY_LEAD:', expectedCLINOPS_STUDY_LEAD);\r",
							"console.log('Actual CLINOPS_STUDY_LEAD from Response:', actualCLINOPS_STUDY_LEAD);\r",
							"\r",
							"// Compare the actual and expected CLINOPS_STUDY_LEADvalues\r",
							"pm.test(\"CLINOPS_STUDY_LEAD value matches the expected value\", function () {\r",
							"    pm.expect(actualCLINOPS_STUDY_LEAD).to.equal(expectedCLINOPS_STUDY_LEAD);\r",
							"});\r",
							"////////////DRUG_SAFETY_SPEC///////////\r",
							"// Get the expected DRUG_SAFETY_SPECfrom the CSV file\r",
							"var expectedDRUG_SAFETY_SPEC= pm.iterationData.get('DRUG_SAFETY_SPEC', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual DRUG_SAFETY_SPECfrom the JSON response\r",
							"var actualDRUG_SAFETY_SPEC= jsonData.DRUG_SAFETY_SPEC;\r",
							"\r",
							"console.log('Expected DRUG_SAFETY_SPEC:', expectedDRUG_SAFETY_SPEC);\r",
							"console.log('Actual DRUG_SAFETY_SPEC from Response:', actualDRUG_SAFETY_SPEC);\r",
							"\r",
							"// Compare the actual and expected DRUG_SAFETY_SPECvalues\r",
							"pm.test(\"DRUG_SAFETY_SPECvalue matches the expected value\", function () {\r",
							"    pm.expect(actualDRUG_SAFETY_SPEC).to.equal(expectedDRUG_SAFETY_SPEC);\r",
							"});\r",
							"////////////DRUG_SAFETY_SPEC_EMAIL///////////\r",
							"// Get the expected DRUG_SAFETY_SPEC_EMAILfrom the CSV file\r",
							"var expectedDRUG_SAFETY_SPEC_EMAIL= pm.iterationData.get('DRUG_SAFETY_SPEC_EMAIL', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual DRUG_SAFETY_SPEC_EMAILfrom the JSON response\r",
							"var actualDRUG_SAFETY_SPEC_EMAIL= jsonData.DRUG_SAFETY_SPEC_EMAIL;\r",
							"\r",
							"console.log('Expected DRUG_SAFETY_SPEC_EMAIL:', expectedDRUG_SAFETY_SPEC_EMAIL);\r",
							"console.log('Actual DRUG_SAFETY_SPEC_EMAIL from Response:', actualDRUG_SAFETY_SPEC_EMAIL);\r",
							"\r",
							"// Compare the actual and expected DRUG_SAFETY_SPEC_EMAILvalues\r",
							"pm.test(\"DRUG_SAFETY_SPEC_EMAILvalue matches the expected value\", function () {\r",
							"    pm.expect(actualDRUG_SAFETY_SPEC_EMAIL).to.equal(expectedDRUG_SAFETY_SPEC_EMAIL);\r",
							"});\r",
							"////////////DUS_FLAG///////////\r",
							"// Get the expected DUS_FLAGfrom the CSV file\r",
							"var expectedDUS_FLAG= pm.iterationData.get('DUS_FLAG', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual DUS_FLAGfrom the JSON response\r",
							"var actualDUS_FLAG= jsonData.DUS_FLAG;\r",
							"\r",
							"console.log('Expected DUS_FLAG:', expectedDUS_FLAG);\r",
							"console.log('Actual DUS_FLAG from Response:', actualDUS_FLAG);\r",
							"\r",
							"// Compare the actual and expected DUS_FLAGvalues\r",
							"pm.test(\"DUS_FLAGvalue matches the expected value\", function () {\r",
							"    pm.expect(actualDUS_FLAG).to.equal(expectedDUS_FLAG);\r",
							"});\r",
							"////////////EA_IPU///////////\r",
							"// Get the expected EA_IPUfrom the CSV file\r",
							"var expectedEA_IPU= pm.iterationData.get('EA_IPU', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual EA_IPUfrom the JSON response\r",
							"var actualEA_IPU= jsonData.EA_IPU;\r",
							"\r",
							"console.log('Expected EA_IPU:', expectedEA_IPU);\r",
							"console.log('Actual EA_IPU from Response:', actualEA_IPU);\r",
							"\r",
							"// Compare the actual and expected EA_IPUvalues\r",
							"pm.test(\"EA_IPUvalue matches the expected value\", function () {\r",
							"    pm.expect(actualEA_IPU).to.equal(expectedEA_IPU);\r",
							"});\r",
							"////////////EPI_FLAG///////////\r",
							"// Get the expected EPI_FLAGfrom the CSV file\r",
							"var expectedEPI_FLAG= pm.iterationData.get('EPI_FLAG', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual EPI_FLAGfrom the JSON response\r",
							"var actualEPI_FLAG= jsonData.EPI_FLAG;\r",
							"\r",
							"console.log('Expected EPI_FLAG:', expectedEPI_FLAG);\r",
							"console.log('Actual EPI_FLAG from Response:', actualEPI_FLAG);\r",
							"\r",
							"// Compare the actual and expected EPI_FLAGvalues\r",
							"pm.test(\"EPI_FLAGvalue matches the expected value\", function () {\r",
							"    pm.expect(actualEPI_FLAG).to.equal(expectedEPI_FLAG);\r",
							"});\r",
							"////////////EST_FPFV///////////\r",
							"// Get the expected EST_FPFVfrom the CSV file\r",
							"var expectedEST_FPFV= pm.iterationData.get('EST_FPFV', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual EST_FPFVfrom the JSON response\r",
							"var actualEST_FPFV= jsonData.EST_FPFV;\r",
							"\r",
							"console.log('Expected EST_FPFV:', expectedEST_FPFV);\r",
							"console.log('Actual EST_FPFV from Response:', actualEST_FPFV);\r",
							"\r",
							"// Compare the actual and expected EST_FPFVvalues\r",
							"pm.test(\"EST_FPFVvalue matches the expected value\", function () {\r",
							"    pm.expect(actualEST_FPFV).to.equal(expectedEST_FPFV);\r",
							"});\r",
							"////////////EST_FPLV///////////\r",
							"// Get the expected EST_FPLVfrom the CSV file\r",
							"var expectedEST_FPLV= pm.iterationData.get('EST_FPLV', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual EST_FPLVfrom the JSON response\r",
							"var actualEST_FPLV= jsonData.EST_FPLV;\r",
							"\r",
							"console.log('Expected EST_FPLV:', expectedEST_FPLV);\r",
							"console.log('Actual EST_FPLV from Response:', actualEST_FPLV);\r",
							"\r",
							"// Compare the actual and expected EST_FPLVvalues\r",
							"pm.test(\"EST_FPLVvalue matches the expected value\", function () {\r",
							"    pm.expect(actualEST_FPLV).to.equal(expectedEST_FPLV);\r",
							"});\r",
							"////////////EST_LPFV///////////\r",
							"// Get the expected EST_LPFVfrom the CSV file\r",
							"var expectedEST_LPFV= pm.iterationData.get('EST_LPFV', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual EST_LPFVfrom the JSON response\r",
							"var actualEST_LPFV= jsonData.EST_LPFV;\r",
							"\r",
							"console.log('Expected EST_LPFV:', expectedEST_LPFV);\r",
							"console.log('Actual EST_LPFV from Response:', actualEST_LPFV);\r",
							"\r",
							"// Compare the actual and expected EST_LPFVvalues\r",
							"pm.test(\"EST_LPFVvalue matches the expected value\", function () {\r",
							"    pm.expect(actualEST_LPFV).to.equal(expectedEST_LPFV);\r",
							"});\r",
							"////////////EST_LPLV///////////\r",
							"// Get the expected EST_LPLVfrom the CSV file\r",
							"var expectedEST_LPLV= pm.iterationData.get('EST_LPLV', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual EST_LPLVfrom the JSON response\r",
							"var actualEST_LPLV= jsonData.EST_LPLV;\r",
							"\r",
							"console.log('Expected EST_LPLV:', expectedEST_LPLV);\r",
							"console.log('Actual EST_LPLV from Response:', actualEST_LPLV);\r",
							"\r",
							"// Compare the actual and expected EST_LPLVvalues\r",
							"pm.test(\"EST_LPLVvalue matches the expected value\", function () {\r",
							"    pm.expect(actualEST_LPLV).to.equal(expectedEST_LPLV);\r",
							"});\r",
							"////////////EST_PRI_ENDPT_LPLV///////////\r",
							"// Get the expected EST_PRI_ENDPT_LPLVfrom the CSV file\r",
							"var expectedEST_PRI_ENDPT_LPLV= pm.iterationData.get('EST_PRI_ENDPT_LPLV', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual EST_PRI_ENDPT_LPLVfrom the JSON response\r",
							"var actualEST_PRI_ENDPT_LPLV= jsonData.EST_PRI_ENDPT_LPLV;\r",
							"\r",
							"console.log('Expected EST_PRI_ENDPT_LPLV:', expectedEST_PRI_ENDPT_LPLV);\r",
							"console.log('Actual EST_PRI_ENDPT_LPLV from Response:', actualEST_PRI_ENDPT_LPLV);\r",
							"\r",
							"// Compare the actual and expected EST_PRI_ENDPT_LPLVvalues\r",
							"pm.test(\"EST_PRI_ENDPT_LPLVvalue matches the expected value\", function () {\r",
							"    pm.expect(actualEST_PRI_ENDPT_LPLV).to.equal(expectedEST_PRI_ENDPT_LPLV);\r",
							"});\r",
							"////////////EUDRACT_NUM///////////\r",
							"// Get the expected EUDRACT_NUMfrom the CSV file\r",
							"var expectedEUDRACT_NUM= pm.iterationData.get('EUDRACT_NUM', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual EUDRACT_NUMfrom the JSON response\r",
							"var actualEUDRACT_NUM= jsonData.EUDRACT_NUM;\r",
							"\r",
							"console.log('Expected EUDRACT_NUM:', expectedEUDRACT_NUM);\r",
							"console.log('Actual EUDRACT_NUM from Response:', actualEUDRACT_NUM);\r",
							"\r",
							"// Compare the actual and expected EUDRACT_NUMvalues\r",
							"pm.test(\"EUDRACT_NUMvalue matches the expected value\", function () {\r",
							"    pm.expect(actualEUDRACT_NUM).to.equal(expectedEUDRACT_NUM);\r",
							"});\r",
							"////////////FINAL_CSR_DT///////////\r",
							"// Get the expected FINAL_CSR_DTfrom the CSV file\r",
							"var expectedFINAL_CSR_DT= pm.iterationData.get('FINAL_CSR_DT', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual FINAL_CSR_DTfrom the JSON response\r",
							"var actualFINAL_CSR_DT= jsonData.FINAL_CSR_DT;\r",
							"\r",
							"console.log('Expected FINAL_CSR_DT:', expectedFINAL_CSR_DT);\r",
							"console.log('Actual FINAL_CSR_DT from Response:', actualFINAL_CSR_DT);\r",
							"\r",
							"// Compare the actual and expected FINAL_CSR_DTvalues\r",
							"pm.test(\"FINAL_CSR_DTvalue matches the expected value\", function () {\r",
							"    pm.expect(actualFINAL_CSR_DT).to.equal(expectedFINAL_CSR_DT);\r",
							"});\r",
							"////////////FIRST_SITE_ACTIVE///////////\r",
							"// Get the expected FIRST_SITE_ACTIVEfrom the CSV file\r",
							"var expectedFIRST_SITE_ACTIVE= pm.iterationData.get('FIRST_SITE_ACTIVE', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual FIRST_SITE_ACTIVEfrom the JSON response\r",
							"var actualFIRST_SITE_ACTIVE= jsonData.FIRST_SITE_ACTIVE;\r",
							"\r",
							"console.log('Expected FIRST_SITE_ACTIVE:', expectedFIRST_SITE_ACTIVE);\r",
							"console.log('Actual FIRST_SITE_ACTIVE from Response:', actualFIRST_SITE_ACTIVE);\r",
							"\r",
							"// Compare the actual and expected FIRST_SITE_ACTIVEvalues\r",
							"pm.test(\"FIRST_SITE_ACTIVE value matches the expected value\", function () {\r",
							"    pm.expect(actualFIRST_SITE_ACTIVE).to.equal(expectedFIRST_SITE_ACTIVE);\r",
							"});\r",
							"////////////FIRST_SUBJ_ENROLLED///////////\r",
							"// Get the expected FIRST_SUBJ_ENROLLEDfrom the CSV file\r",
							"var expectedFIRST_SUBJ_ENROLLED= pm.iterationData.get('FIRST_SUBJ_ENROLLED', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual FIRST_SUBJ_ENROLLEDfrom the JSON response\r",
							"var actualFIRST_SUBJ_ENROLLED= jsonData.FIRST_SUBJ_ENROLLED;\r",
							"\r",
							"console.log('Expected FIRST_SUBJ_ENROLLED:', expectedFIRST_SUBJ_ENROLLED);\r",
							"console.log('Actual FIRST_SUBJ_ENROLLED from Response:', actualFIRST_SUBJ_ENROLLED);\r",
							"\r",
							"// Compare the actual and expected FIRST_SUBJ_ENROLLEDvalues\r",
							"pm.test(\"FIRST_SUBJ_ENROLLEDvalue matches the expected value\", function () {\r",
							"    pm.expect(actualFIRST_SUBJ_ENROLLED).to.equal(expectedFIRST_SUBJ_ENROLLED);\r",
							"});\r",
							"////////////HV_FLAG///////////\r",
							"// Get the expected HV_FLAGfrom the CSV file\r",
							"var expectedHV_FLAG= pm.iterationData.get('HV_FLAG', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual HV_FLAGfrom the JSON response\r",
							"var actualHV_FLAG= jsonData.HV_FLAG;\r",
							"\r",
							"console.log('Expected HV_FLAG:', expectedHV_FLAG);\r",
							"console.log('Actual HV_FLAG from Response:', actualHV_FLAG);\r",
							"\r",
							"// Compare the actual and expected HV_FLAGvalues\r",
							"pm.test(\"HV_FLAGvalue matches the expected value\", function () {\r",
							"    pm.expect(actualHV_FLAG).to.equal(expectedHV_FLAG);\r",
							"});\r",
							"////////////INDICATION///////////\r",
							"// Get the expected INDICATIONfrom the CSV file\r",
							"var expectedINDICATION= pm.iterationData.get('INDICATION', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual INDICATIONfrom the JSON response\r",
							"var actualINDICATION= jsonData.INDICATION;\r",
							"\r",
							"console.log('Expected INDICATION:', expectedINDICATION);\r",
							"console.log('Actual INDICATION from Response:', actualINDICATION);\r",
							"\r",
							"// Compare the actual and expected INDICATIONvalues\r",
							"pm.test(\"INDICATIONvalue matches the expected value\", function () {\r",
							"    pm.expect(actualINDICATION).to.equal(expectedINDICATION);\r",
							"});\r",
							"////////////LTFU_LPLV///////////\r",
							"// Get the expected LTFU_LPLVfrom the CSV file\r",
							"var expectedLTFU_LPLV= pm.iterationData.get('LTFU_LPLV', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual LTFU_LPLVfrom the JSON response\r",
							"var actualLTFU_LPLV= jsonData.LTFU_LPLV;\r",
							"\r",
							"console.log('Expected LTFU_LPLV:', expectedLTFU_LPLV);\r",
							"console.log('Actual LTFU_LPLV from Response:', actualLTFU_LPLV);\r",
							"\r",
							"// Compare the actual and expected LTFU_LPLVvalues\r",
							"pm.test(\"LTFU_LPLVvalue matches the expected value\", function () {\r",
							"    pm.expect(actualLTFU_LPLV).to.equal(expectedLTFU_LPLV);\r",
							"});\r",
							"////////////NICKNAME///////////\r",
							"// Get the expected NICKNAMEfrom the CSV file\r",
							"var expectedNICKNAME= pm.iterationData.get('NICKNAME', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual NICKNAMEfrom the JSON response\r",
							"var actualNICKNAME= jsonData.NICKNAME;\r",
							"\r",
							"console.log('Expected NICKNAME:', expectedNICKNAME);\r",
							"console.log('Actual NICKNAME from Response:', actualNICKNAME);\r",
							"\r",
							"// Compare the actual and expected NICKNAMEvalues\r",
							"pm.test(\"NICKNAMEvalue matches the expected value\", function () {\r",
							"    pm.expect(actualNICKNAME).to.equal(expectedNICKNAME);\r",
							"});\r",
							"////////////NONGILEAD_IMP///////////\r",
							"// Get the expected NONGILEAD_IMPfrom the CSV file\r",
							"var expectedNONGILEAD_IMP= pm.iterationData.get('NONGILEAD_IMP', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual NONGILEAD_IMPfrom the JSON response\r",
							"var actualNONGILEAD_IMP= jsonData.NONGILEAD_IMP;\r",
							"\r",
							"console.log('Expected NONGILEAD_IMP:', expectedNONGILEAD_IMP);\r",
							"console.log('Actual NONGILEAD_IMP from Response:', actualNONGILEAD_IMP);\r",
							"\r",
							"// Compare the actual and expected NONGILEAD_IMPvalues\r",
							"pm.test(\"NONGILEAD_IMPvalue matches the expected value\", function () {\r",
							"    pm.expect(actualNONGILEAD_IMP).to.equal(expectedNONGILEAD_IMP);\r",
							"});\r",
							"////////////NUM_Planned_Sites///////////\r",
							"// Get the expected NUM_Planned_Sitesfrom the CSV file\r",
							"var expectedNUM_Planned_Sites= pm.iterationData.get('NUM_Planned_Sites', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual NUM_Planned_Sitesfrom the JSON response\r",
							"var actualNUM_Planned_Sites= jsonData.NUM_Planned_Sites;\r",
							"\r",
							"console.log('Expected NUM_Planned_Sites:', expectedNUM_Planned_Sites);\r",
							"console.log('Actual NUM_Planned_Sites from Response:', actualNUM_Planned_Sites);\r",
							"\r",
							"// Compare the actual and expected NUM_Planned_Sitesvalues\r",
							"pm.test(\"NUM_Planned_Sitesvalue matches the expected value\", function () {\r",
							"    pm.expect(actualNUM_Planned_Sites).to.equal(expectedNUM_Planned_Sites);\r",
							"});\r",
							"////////////NUM_Planned_Subjects///////////\r",
							"// Get the expected NUM_Planned_Subjectsfrom the CSV file\r",
							"var expectedNUM_Planned_Subjects= pm.iterationData.get('NUM_Planned_Subjects', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual NUM_Planned_Subjectsfrom the JSON response\r",
							"var actualNUM_Planned_Subjects= jsonData.NUM_Planned_Subjects;\r",
							"\r",
							"console.log('Expected NUM_Planned_Subjects:', expectedNUM_Planned_Subjects);\r",
							"console.log('Actual NUM_Planned_Subjects from Response:', actualNUM_Planned_Subjects);\r",
							"\r",
							"// Compare the actual and expected NUM_Planned_Subjectsvalues\r",
							"pm.test(\"NUM_Planned_Subjectsvalue matches the expected value\", function () {\r",
							"    pm.expect(actualNUM_Planned_Subjects).to.equal(expectedNUM_Planned_Subjects);\r",
							"});\r",
							"////////////NUM_SUBJ_ENRL///////////\r",
							"// Get the expected NUM_SUBJ_ENRLfrom the CSV file\r",
							"var expectedNUM_SUBJ_ENRL= pm.iterationData.get('NUM_SUBJ_ENRL', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual NUM_SUBJ_ENRLfrom the JSON response\r",
							"var actualNUM_SUBJ_ENRL= jsonData.NUM_SUBJ_ENRL;\r",
							"\r",
							"console.log('Expected NUM_SUBJ_ENRL:', expectedNUM_SUBJ_ENRL);\r",
							"console.log('Actual NUM_SUBJ_ENRL from Response:', actualNUM_SUBJ_ENRL);\r",
							"\r",
							"// Compare the actual and expected NUM_SUBJ_ENRLvalues\r",
							"pm.test(\"NUM_SUBJ_ENRLvalue matches the expected value\", function () {\r",
							"    pm.expect(actualNUM_SUBJ_ENRL).to.equal(expectedNUM_SUBJ_ENRL);\r",
							"});\r",
							"////////////PASS///////////\r",
							"// Get the expected PASSfrom the CSV file\r",
							"var expectedPASS= pm.iterationData.get('PASS', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual PASSfrom the JSON response\r",
							"var actualPASS= jsonData.PASS;\r",
							"\r",
							"console.log('Expected PASS:', expectedPASS);\r",
							"console.log('Actual PASS Name from Response:', actualPASS);\r",
							"\r",
							"// Compare the actual and expected PASSvalues\r",
							"pm.test(\"PASSvalue matches the expected value\", function () {\r",
							"    pm.expect(actualPASS).to.equal(expectedPASS);\r",
							"});\r",
							"////////////PHASE///////////\r",
							"// Get the expected PHASEfrom the CSV file\r",
							"var expectedPHASE= pm.iterationData.get('PHASE', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual PHASEfrom the JSON response\r",
							"var actualPHASE= jsonData.PHASE;\r",
							"\r",
							"console.log('Expected PHASE Name:', expectedPHASE);\r",
							"console.log('Actual PHASE Name from Response:', actualPHASE);\r",
							"\r",
							"// Compare the actual and expected PHASEvalues\r",
							"pm.test(\"PHASEvalue matches the expected value\", function () {\r",
							"    pm.expect(actualPHASE).to.equal(expectedPHASE);\r",
							"});\r",
							"////////////PK_FLG///////////\r",
							"// Get the expected PK_FLGfrom the CSV file\r",
							"var expectedPK_FLG= pm.iterationData.get('PK_FLG', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual PK_FLGfrom the JSON response\r",
							"var actualPK_FLG= jsonData.PK_FLG;\r",
							"\r",
							"console.log('Expected PK_FLG :', expectedPK_FLG);\r",
							"console.log('Actual PK_FLG from Response:', actualPK_FLG);\r",
							"\r",
							"// Compare the actual and expected PK_FLGvalues\r",
							"pm.test(\"PK_FLGvalue matches the expected value\", function () {\r",
							"    pm.expect(actualPK_FLG).to.equal(expectedPK_FLG);\r",
							"});\r",
							"////////////PRIMARY_TEAM_MEMBER///////////\r",
							"// Get the expected PRIMARY_TEAM_MEMBERfrom the CSV file\r",
							"var expectedPRIMARY_TEAM_MEMBER= pm.iterationData.get('PRIMARY_TEAM_MEMBER', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual PRIMARY_TEAM_MEMBERfrom the JSON response\r",
							"var actualPRIMARY_TEAM_MEMBER= jsonData.PRIMARY_TEAM_MEMBER;\r",
							"\r",
							"console.log('Expected PRIMARY_TEAM_MEMBER:', expectedPRIMARY_TEAM_MEMBER);\r",
							"console.log('Actual PRIMARY_TEAM_MEMBER from Response:', actualPRIMARY_TEAM_MEMBER);\r",
							"\r",
							"// Compare the actual and expected PRIMARY_TEAM_MEMBERvalues\r",
							"pm.test(\"PRIMARY_TEAM_MEMBERvalue matches the expected value\", function () {\r",
							"    pm.expect(actualPRIMARY_TEAM_MEMBER).to.equal(expectedPRIMARY_TEAM_MEMBER);\r",
							"});\r",
							"////////////PRODUCT///////////\r",
							"// Get the expected PRODUCTfrom the CSV file\r",
							"var expectedPRODUCT= pm.iterationData.get('PRODUCT', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual PRODUCTfrom the JSON response\r",
							"var actualPRODUCT= jsonData.PRODUCT;\r",
							"\r",
							"console.log('Expected Product Name:', expectedPRODUCT);\r",
							"console.log('Actual Product Name from Response:', actualPRODUCT);\r",
							"\r",
							"// Compare the actual and expected PRODUCTvalues\r",
							"pm.test(\"PRODUCTvalue matches the expected value\", function () {\r",
							"    pm.expect(actualPRODUCT).to.equal(expectedPRODUCT);\r",
							"});\r",
							"////////////PRODUCT_CODE///////////\r",
							"// Get the expected PRODUCT_CODEfrom the CSV file\r",
							"var expectedPRODUCT_CODE= pm.iterationData.get('PRODUCT_CODE', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual PRODUCT_CODEfrom the JSON response\r",
							"var actualPRODUCT_CODE= jsonData.PRODUCT_CODE;\r",
							"\r",
							"console.log('Expected PRODUCT_CODE Name:', expectedPRODUCT_CODE);\r",
							"console.log('Actual PRODUCT_CODE Name from Response:', actualPRODUCT_CODE);\r",
							"\r",
							"// Compare the actual and expected PRODUCT_CODEvalues\r",
							"pm.test(\"PRODUCT_CODEvalue matches the expected value\", function () {\r",
							"    pm.expect(actualPRODUCT_CODE).to.equal(expectedPRODUCT_CODE);\r",
							"});\r",
							"////////////PRODUCT_LINE///////////\r",
							"// Get the expected PRODUCT_LINEfrom the CSV file\r",
							"var expectedPRODUCT_LINE= pm.iterationData.get('PRODUCT_LINE', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual PRODUCT_LINEfrom the JSON response\r",
							"var actualPRODUCT_LINE= jsonData.PRODUCT_LINE;\r",
							"\r",
							"console.log('Expected PRODUCT_LINE Name:', expectedPRODUCT_LINE);\r",
							"console.log('Actual PRODUCT_LINE Name from Response:', actualPRODUCT_LINE);\r",
							"\r",
							"// Compare the actual and expected PRODUCT_LINEvalues\r",
							"pm.test(\"PRODUCT_LINEvalue matches the expected value\", function () {\r",
							"    pm.expect(actualPRODUCT_LINE).to.equal(expectedPRODUCT_LINE);\r",
							"});\r",
							"////////////PROTOCOL///////////\r",
							"// Get the expected PROTOCOLfrom the CSV file\r",
							"var expectedPROTOCOL= pm.iterationData.get('PROTOCOL', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual PROTOCOLfrom the JSON response\r",
							"var actualPROTOCOL= jsonData.PROTOCOL;\r",
							"\r",
							"console.log('Expected PROTOCOL:', expectedPROTOCOL);\r",
							"console.log('Actual PROTOCOL from Response:', actualPROTOCOL);\r",
							"\r",
							"// Compare the actual and expected PROTOCOLvalues\r",
							"pm.test(\"PROTOCOLvalue matches the expected value\", function () {\r",
							"    pm.expect(actualPROTOCOL).to.equal(expectedPROTOCOL);\r",
							"});\r",
							"////////////PROTOCOL_APPROVAL///////////\r",
							"// Get the expected PROTOCOL_APPROVALfrom the CSV file\r",
							"var expectedPROTOCOL_APPROVAL= pm.iterationData.get('PROTOCOL_APPROVAL', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual PROTOCOL_APPROVALfrom the JSON response\r",
							"var actualPROTOCOL_APPROVAL= jsonData.PROTOCOL_APPROVAL;\r",
							"\r",
							"console.log('Expected PROTOCOL_APPROVAL:', expectedPROTOCOL_APPROVAL);\r",
							"console.log('Actual PROTOCOL_APPROVAL from Response:', actualPROTOCOL_APPROVAL);\r",
							"\r",
							"// Compare the actual and expected PROTOCOL_APPROVALvalues\r",
							"pm.test(\"PROTOCOL_APPROVALvalue matches the expected value\", function () {\r",
							"    pm.expect(actualPROTOCOL_APPROVAL).to.equal(expectedPROTOCOL_APPROVAL);\r",
							"});\r",
							"////////////PROTOCOL_CREATED///////////\r",
							"// Get the expected PROTOCOL_CREATEDfrom the CSV file\r",
							"var expectedPROTOCOL_CREATED= pm.iterationData.get('PROTOCOL_CREATED', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual PROTOCOL_CREATEDfrom the JSON response\r",
							"var actualPROTOCOL_CREATED= jsonData.PROTOCOL_CREATED;\r",
							"\r",
							"console.log('Expected PROTOCOL_CREATED:', expectedPROTOCOL_CREATED);\r",
							"console.log('Actual PROTOCOL_CREATED from Response:', actualPROTOCOL_CREATED);\r",
							"\r",
							"// Compare the actual and expected PROTOCOL_CREATEDvalues\r",
							"pm.test(\"PROTOCOL_CREATEDvalue matches the expected value\", function () {\r",
							"    pm.expect(actualPROTOCOL_CREATED).to.equal(expectedPROTOCOL_CREATED);\r",
							"});\r",
							"////////////PROTOCOL_FINAL_SYNOPSIS_DT///////////\r",
							"// Get the expected PROTOCOL_FINAL_SYNOPSIS_DTfrom the CSV file\r",
							"var expectedPROTOCOL_FINAL_SYNOPSIS_DT= pm.iterationData.get('PROTOCOL_FINAL_SYNOPSIS_DT', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual PROTOCOL_FINAL_SYNOPSIS_DTfrom the JSON response\r",
							"var actualPROTOCOL_FINAL_SYNOPSIS_DT= jsonData.PROTOCOL_FINAL_SYNOPSIS_DT;\r",
							"\r",
							"console.log('Expected PROTOCOL_FINAL_SYNOPSIS_DT:', expectedPROTOCOL_FINAL_SYNOPSIS_DT);\r",
							"console.log('Actual PROTOCOL_FINAL_SYNOPSIS_DT from Response:', actualPROTOCOL_FINAL_SYNOPSIS_DT);\r",
							"\r",
							"// Compare the actual and expected PROTOCOL_FINAL_SYNOPSIS_DTvalues\r",
							"pm.test(\"PROTOCOL_FINAL_SYNOPSIS_DTvalue matches the expected value\", function () {\r",
							"    pm.expect(actualPROTOCOL_FINAL_SYNOPSIS_DT).to.equal(expectedPROTOCOL_FINAL_SYNOPSIS_DT);\r",
							"});\r",
							"////////////PROTOCOL_ID///////////\r",
							"// Get the expected PROTOCOL_IDfrom the CSV file\r",
							"var expectedPROTOCOL_ID= pm.iterationData.get('PROTOCOL_ID', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual PROTOCOL_IDfrom the JSON response\r",
							"var actualPROTOCOL_ID= jsonData.PROTOCOL_ID;\r",
							"\r",
							"console.log('Expected PROTOCOL_ID:', expectedPROTOCOL_ID);\r",
							"console.log('Actual PROTOCOL_ID from Response:', actualPROTOCOL_ID);\r",
							"\r",
							"// Compare the actual and expected PROTOCOL_IDvalues\r",
							"pm.test(\"PROTOCOL_IDvalue matches the expected value\", function () {\r",
							"    pm.expect(actualPROTOCOL_ID).to.equal(expectedPROTOCOL_ID);\r",
							"});\r",
							"////////////PROTOCOL_KEY_FIELD_LAST_UPDATE///////////\r",
							"// Get the expected PROTOCOL_KEY_FIELD_LAST_UPDATEfrom the CSV file\r",
							"var expectedPROTOCOL_KEY_FIELD_LAST_UPDATE= pm.iterationData.get('PROTOCOL_KEY_FIELD_LAST_UPDATE', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual PROTOCOL_KEY_FIELD_LAST_UPDATEfrom the JSON response\r",
							"var actualPROTOCOL_KEY_FIELD_LAST_UPDATE= jsonData.PROTOCOL_KEY_FIELD_LAST_UPDATE;\r",
							"\r",
							"console.log('Expected PROTOCOL_KEY_FIELD_LAST_UPDATE:', expectedPROTOCOL_KEY_FIELD_LAST_UPDATE);\r",
							"console.log('Actual PROTOCOL_KEY_FIELD_LAST_UPDATE from Response:', actualPROTOCOL_KEY_FIELD_LAST_UPDATE);\r",
							"\r",
							"// Compare the actual and expected PROTOCOL_KEY_FIELD_LAST_UPDATEvalues\r",
							"pm.test(\"PROTOCOL_KEY_FIELD_LAST_UPDATEvalue matches the expected value\", function () {\r",
							"    pm.expect(actualPROTOCOL_KEY_FIELD_LAST_UPDATE).to.equal(expectedPROTOCOL_KEY_FIELD_LAST_UPDATE);\r",
							"});\r",
							"////////////PROTOCOL_SIGNOFF_DT///////////\r",
							"// Get the expected PROTOCOL_SIGNOFF_DTfrom the CSV file\r",
							"var expectedPROTOCOL_SIGNOFF_DT= pm.iterationData.get('PROTOCOL_SIGNOFF_DT', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual PROTOCOL_SIGNOFF_DTfrom the JSON response\r",
							"var actualPROTOCOL_SIGNOFF_DT= jsonData.PROTOCOL_SIGNOFF_DT;\r",
							"\r",
							"console.log('Expected PROTOCOL_SIGNOFF_DT:', expectedPROTOCOL_SIGNOFF_DT);\r",
							"console.log('Actual PROTOCOL_SIGNOFF_DT from Response:', actualPROTOCOL_SIGNOFF_DT);\r",
							"\r",
							"// Compare the actual and expected PROTOCOL_SIGNOFF_DTvalues\r",
							"pm.test(\"PROTOCOL_SIGNOFF_DTvalue matches the expected value\", function () {\r",
							"    pm.expect(actualPROTOCOL_SIGNOFF_DT).to.equal(expectedPROTOCOL_SIGNOFF_DT);\r",
							"});\r",
							"////////////PROTOCOL_TYPE///////////\r",
							"// Get the expected PROTOCOL_TYPEfrom the CSV file\r",
							"var expectedPROTOCOL_TYPE= pm.iterationData.get('PROTOCOL_TYPE', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual PROTOCOL_TYPEfrom the JSON response\r",
							"var actualPROTOCOL_TYPE= jsonData.PROTOCOL_TYPE;\r",
							"\r",
							"console.log('Expected PROTOCOL_TYPE:', expectedPROTOCOL_TYPE);\r",
							"console.log('Actual PROTOCOL_TYPE from Response:', actualPROTOCOL_TYPE);\r",
							"\r",
							"// Compare the actual and expected PROTOCOL_TYPEvalues\r",
							"pm.test(\"PROTOCOL_TYPEvalue matches the expected value\", function () {\r",
							"    pm.expect(actualPROTOCOL_TYPE).to.equal(expectedPROTOCOL_TYPE);\r",
							"});\r",
							"////////////REGION///////////\r",
							"// Get the expected REGIONfrom the CSV file\r",
							"var expectedREGION= pm.iterationData.get('REGION', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual REGIONfrom the JSON response\r",
							"var actualREGION= jsonData.REGION;\r",
							"\r",
							"console.log('Expected REGION:', expectedREGION);\r",
							"console.log('Actual REGION from Response:', actualREGION);\r",
							"\r",
							"// Compare the actual and expected REGIONvalues\r",
							"pm.test(\"REGIONvalue matches the expected value\", function () {\r",
							"    pm.expect(actualREGION).to.equal(expectedREGION);\r",
							"});\r",
							"////////////REQ_REG_AUTH///////////\r",
							"// Get the expected REQ_REG_AUTHfrom the CSV file\r",
							"var expectedREQ_REG_AUTH= pm.iterationData.get('REQ_REG_AUTH', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual REQ_REG_AUTHfrom the JSON response\r",
							"var actualREQ_REG_AUTH= jsonData.REQ_REG_AUTH;\r",
							"\r",
							"console.log('Expected REQ_REG_AUTH:', expectedREQ_REG_AUTH);\r",
							"console.log('Actual REQ_REG_AUTH from Response:', actualREQ_REG_AUTH);\r",
							"\r",
							"// Compare the actual and expected REQ_REG_AUTHvalues\r",
							"pm.test(\"REQ_REG_AUTHvalue matches the expected value\", function () {\r",
							"    pm.expect(actualREQ_REG_AUTH).to.equal(expectedREQ_REG_AUTH);\r",
							"});\r",
							"////////////SPONSOR_TYPE///////////\r",
							"// Get the expected SPONSOR_TYPEfrom the CSV file\r",
							"var expectedSPONSOR_TYPE= pm.iterationData.get('SPONSOR_TYPE', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual SPONSOR_TYPEfrom the JSON response\r",
							"var actualSPONSOR_TYPE= jsonData.SPONSOR_TYPE;\r",
							"\r",
							"console.log('Expected SPONSOR_TYPE:', expectedSPONSOR_TYPE);\r",
							"console.log('Actual SPONSOR_TYPE from Response:', actualSPONSOR_TYPE);\r",
							"\r",
							"// Compare the actual and expected SPONSOR_TYPEvalues\r",
							"pm.test(\"SPONSOR_TYPEvalue matches the expected value\", function () {\r",
							"    pm.expect(actualSPONSOR_TYPE).to.equal(expectedSPONSOR_TYPE);\r",
							"});\r",
							"////////////TA///////////\r",
							"// Get the expected TAfrom the CSV file\r",
							"var expectedTA= pm.iterationData.get('TA', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual TAfrom the JSON response\r",
							"var actualTA= jsonData.TA;\r",
							"\r",
							"console.log('Expected TA:', expectedTA);\r",
							"console.log('Actual TA from Response:', actualTA);\r",
							"\r",
							"// Compare the actual and expected TAvalues\r",
							"pm.test(\"TAvalue matches the expected value\", function () {\r",
							"    pm.expect(actualTA).to.equal(expectedTA);\r",
							"});\r",
							"////////////TITLE///////////\r",
							"// Get the expected TITLE from the CSV file\r",
							"var expectedTITLE = pm.iterationData.get('TITLE', { sheet: 'Protocols' });\r",
							"\r",
							"// Get the actual TITLE from the JSON response\r",
							"var actualTITLE = jsonData.TITLE;\r",
							"\r",
							"console.log('Expected TITLE Name:', expectedTITLE);\r",
							"console.log('Actual TITLE Name from Response:', actualTITLE);\r",
							"\r",
							"// Compare the actual and expected TITLE values\r",
							"pm.test(\"TITLE value matches the expected value\", function () {\r",
							"    pm.expect(actualTITLE).to.equal(expectedTITLE);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "eyJraWQiOiJQeVpUOWtTZ29INlNSUURBMmFKQkZwUFJ1UEhkY3hwVjc1UWlrYUhIblNnPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI0aHBmaWM3cXIxNHFxOXUxaHR0aThlbnJldiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXBpYXV0aGlkZW50aWZpZXJcL2pzb24ucmVhZCIsImF1dGhfdGltZSI6MTY4MDU5ODg1NCwiaXNzIjoiaHR0cHM6XC9cL2NvZ25pdG8taWRwLnVzLXdlc3QtMi5hbWF6b25hd3MuY29tXC91cy13ZXN0LTJfcWZWYWRhalA2IiwiZXhwIjoxNjgwNjAyNDU0LCJpYXQiOjE2ODA1OTg4NTQsInZlcnNpb24iOjIsImp0aSI6ImE1ZDgxYzY0LWM0NDQtNDBkYS1hZDIxLTc4NGYyNjAxY2M0YiIsImNsaWVudF9pZCI6IjRocGZpYzdxcjE0cXE5dTFodHRpOGVucmV2In0.XW_JT8H_h7Bt1WeTiBS1mf8lz8ZZsO75T3VNN1OQE8JwnG7tZR6aAV3lZGXQJVQn6zV9MTC0_VOqderKaXqUR5PkktSbyV-J3_hqtrZVuzL5Y5m0Z7FESYKQBMSkp17mzKtwEPyUGa3i5QVYVWDOJXHvLg8IbmxSkXXHdma7vjgJWM1WCtnVh-FkjmQ_KFke9_yoJxT53cVwWhpIRsYXu1F-8PHQf-U0gAHZW_zjANErZ7tbpUqXyEf1tF0ZYN8-Xa3Rg-vrtt1Kchd5N7XUZQytHPEsIHke3W604jUIZLtztkixYZUlowUP56P6G2s4L9SGi_ZWNzR8J3oLbqGqCQ",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}/protocols/{{Protocols_Id}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"protocols",
						"{{Protocols_Id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GILDA Protocols With Invalid Paging",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"try {\r",
							"    pm.test(\"Test results\", function () {\r",
							"        pm.response.to.have.status(400);\r",
							"        const statusCode = pm.response.code;\r",
							"        pm.test(\"Status code: \" + statusCode, function () {\r",
							"            pm.expect(statusCode).to.equal(400);\r",
							"        });\r",
							"    });\r",
							"} catch (error) {\r",
							"    pm.test(\"Test results - Error\", function () {\r",
							"        throw new Error(\"Error: \" + error.message);\r",
							"    });\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://6f05mslpff.execute-api.us-west-2.amazonaws.com/dev/gilda/protocols?page_size=2&page_number=0",
					"protocol": "https",
					"host": [
						"6f05mslpff",
						"execute-api",
						"us-west-2",
						"amazonaws",
						"com"
					],
					"path": [
						"dev",
						"gilda",
						"protocols"
					],
					"query": [
						{
							"key": "page_size",
							"value": "2"
						},
						{
							"key": "page_number",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GILDA Protocols With no page number and page size",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"    var expectedProductCount = 100;\r",
							"\r",
							"    pm.test(`Number of products is ${expectedProductCount}`, function () {\r",
							"        pm.expect(jsonData.length).to.equal(expectedProductCount);\r",
							"    });\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://6f05mslpff.execute-api.us-west-2.amazonaws.com/dev/gilda/protocols/",
					"protocol": "https",
					"host": [
						"6f05mslpff",
						"execute-api",
						"us-west-2",
						"amazonaws",
						"com"
					],
					"path": [
						"dev",
						"gilda",
						"protocols",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "GILDA Sites with Invalid Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"try {\r",
							"    pm.test(\"Test results\", function () {\r",
							"        pm.response.to.have.status(400);\r",
							"        const statusCode = pm.response.code;\r",
							"        pm.test(\"Status code: \" + statusCode, function () {\r",
							"            pm.expect(statusCode).to.equal(400);\r",
							"        });\r",
							"    });\r",
							"} catch (error) {\r",
							"    pm.test(\"Test results - Error\", function () {\r",
							"        throw new Error(\"Error: \" + error.message);\r",
							"    });\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "eyJraWQiOiJQeVpUOWtTZ29INlNSUURBMmFKQkZwUFJ1UEhkY3hwVjc1UWlrYUhIblNnPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI0aHBmaWM3cXIxNHFxOXUxaHR0aThlbnJldiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXBpYXV0aGlkZW50aWZpZXJcL2pzb24ucmVhZCIsImF1dGhfdGltZSI6MTY4MDU5ODg1NCwiaXNzIjoiaHR0cHM6XC9cL2NvZ25pdG8taWRwLnVzLXdlc3QtMi5hbWF6b25hd3MuY29tXC91cy13ZXN0LTJfcWZWYWRhalA2IiwiZXhwIjoxNjgwNjAyNDU0LCJpYXQiOjE2ODA1OTg4NTQsInZlcnNpb24iOjIsImp0aSI6ImE1ZDgxYzY0LWM0NDQtNDBkYS1hZDIxLTc4NGYyNjAxY2M0YiIsImNsaWVudF9pZCI6IjRocGZpYzdxcjE0cXE5dTFodHRpOGVucmV2In0.XW_JT8H_h7Bt1WeTiBS1mf8lz8ZZsO75T3VNN1OQE8JwnG7tZR6aAV3lZGXQJVQn6zV9MTC0_VOqderKaXqUR5PkktSbyV-J3_hqtrZVuzL5Y5m0Z7FESYKQBMSkp17mzKtwEPyUGa3i5QVYVWDOJXHvLg8IbmxSkXXHdma7vjgJWM1WCtnVh-FkjmQ_KFke9_yoJxT53cVwWhpIRsYXu1F-8PHQf-U0gAHZW_zjANErZ7tbpUqXyEf1tF0ZYN8-Xa3Rg-vrtt1Kchd5N7XUZQytHPEsIHke3W604jUIZLtztkixYZUlowUP56P6G2s4L9SGi_ZWNzR8J3oLbqGqCQ",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://6f05mslpff.execute-api.us-west-2.amazonaws.com/dev/gilda/sites/0",
					"protocol": "https",
					"host": [
						"6f05mslpff",
						"execute-api",
						"us-west-2",
						"amazonaws",
						"com"
					],
					"path": [
						"dev",
						"gilda",
						"sites",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "GILDA Sites without Id -Default 100",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"try {\r",
							"    pm.test(\"Test results\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"        const statusCode = pm.response.code;\r",
							"        pm.test(\"Status code: \" + statusCode, function () {\r",
							"            pm.expect(statusCode).to.equal(200);\r",
							"        });\r",
							"    });\r",
							"} catch (error) {\r",
							"    pm.test(\"Test results - Error\", function () {\r",
							"        throw new Error(\"Error: \" + error.message);\r",
							"    });\r",
							"}\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"    var expectedProductCount = 100;\r",
							"\r",
							"    pm.test(`Number of displayed products is ${expectedProductCount}`, function () {\r",
							"        pm.expect(jsonData.length).to.equal(expectedProductCount);\r",
							"    });\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "eyJraWQiOiJQeVpUOWtTZ29INlNSUURBMmFKQkZwUFJ1UEhkY3hwVjc1UWlrYUhIblNnPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI0aHBmaWM3cXIxNHFxOXUxaHR0aThlbnJldiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXBpYXV0aGlkZW50aWZpZXJcL2pzb24ucmVhZCIsImF1dGhfdGltZSI6MTY4MDU5ODg1NCwiaXNzIjoiaHR0cHM6XC9cL2NvZ25pdG8taWRwLnVzLXdlc3QtMi5hbWF6b25hd3MuY29tXC91cy13ZXN0LTJfcWZWYWRhalA2IiwiZXhwIjoxNjgwNjAyNDU0LCJpYXQiOjE2ODA1OTg4NTQsInZlcnNpb24iOjIsImp0aSI6ImE1ZDgxYzY0LWM0NDQtNDBkYS1hZDIxLTc4NGYyNjAxY2M0YiIsImNsaWVudF9pZCI6IjRocGZpYzdxcjE0cXE5dTFodHRpOGVucmV2In0.XW_JT8H_h7Bt1WeTiBS1mf8lz8ZZsO75T3VNN1OQE8JwnG7tZR6aAV3lZGXQJVQn6zV9MTC0_VOqderKaXqUR5PkktSbyV-J3_hqtrZVuzL5Y5m0Z7FESYKQBMSkp17mzKtwEPyUGa3i5QVYVWDOJXHvLg8IbmxSkXXHdma7vjgJWM1WCtnVh-FkjmQ_KFke9_yoJxT53cVwWhpIRsYXu1F-8PHQf-U0gAHZW_zjANErZ7tbpUqXyEf1tF0ZYN8-Xa3Rg-vrtt1Kchd5N7XUZQytHPEsIHke3W604jUIZLtztkixYZUlowUP56P6G2s4L9SGi_ZWNzR8J3oLbqGqCQ",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://6f05mslpff.execute-api.us-west-2.amazonaws.com/dev/gilda/sites/0",
					"protocol": "https",
					"host": [
						"6f05mslpff",
						"execute-api",
						"us-west-2",
						"amazonaws",
						"com"
					],
					"path": [
						"dev",
						"gilda",
						"sites",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "GILDA Sites With Paging",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"try {\r",
							"    pm.test(\"Test results\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"        const statusCode = pm.response.code;\r",
							"        pm.test(\"Status code: \" + statusCode, function () {\r",
							"            pm.expect(statusCode).to.equal(200);\r",
							"        });\r",
							"    });\r",
							"} catch (error) {\r",
							"    pm.test(\"Test results - Error\", function () {\r",
							"        throw new Error(\"Error: \" + error.message);\r",
							"    });\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "eyJraWQiOiJQeVpUOWtTZ29INlNSUURBMmFKQkZwUFJ1UEhkY3hwVjc1UWlrYUhIblNnPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI0aHBmaWM3cXIxNHFxOXUxaHR0aThlbnJldiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXBpYXV0aGlkZW50aWZpZXJcL2pzb24ucmVhZCIsImF1dGhfdGltZSI6MTY4MDU5ODg1NCwiaXNzIjoiaHR0cHM6XC9cL2NvZ25pdG8taWRwLnVzLXdlc3QtMi5hbWF6b25hd3MuY29tXC91cy13ZXN0LTJfcWZWYWRhalA2IiwiZXhwIjoxNjgwNjAyNDU0LCJpYXQiOjE2ODA1OTg4NTQsInZlcnNpb24iOjIsImp0aSI6ImE1ZDgxYzY0LWM0NDQtNDBkYS1hZDIxLTc4NGYyNjAxY2M0YiIsImNsaWVudF9pZCI6IjRocGZpYzdxcjE0cXE5dTFodHRpOGVucmV2In0.XW_JT8H_h7Bt1WeTiBS1mf8lz8ZZsO75T3VNN1OQE8JwnG7tZR6aAV3lZGXQJVQn6zV9MTC0_VOqderKaXqUR5PkktSbyV-J3_hqtrZVuzL5Y5m0Z7FESYKQBMSkp17mzKtwEPyUGa3i5QVYVWDOJXHvLg8IbmxSkXXHdma7vjgJWM1WCtnVh-FkjmQ_KFke9_yoJxT53cVwWhpIRsYXu1F-8PHQf-U0gAHZW_zjANErZ7tbpUqXyEf1tF0ZYN8-Xa3Rg-vrtt1Kchd5N7XUZQytHPEsIHke3W604jUIZLtztkixYZUlowUP56P6G2s4L9SGi_ZWNzR8J3oLbqGqCQ",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://6f05mslpff.execute-api.us-west-2.amazonaws.com/dev/gilda/sites?page_size=2&page_number=5",
					"protocol": "https",
					"host": [
						"6f05mslpff",
						"execute-api",
						"us-west-2",
						"amazonaws",
						"com"
					],
					"path": [
						"dev",
						"gilda",
						"sites"
					],
					"query": [
						{
							"key": "page_size",
							"value": "2"
						},
						{
							"key": "page_number",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GILDA Sites with no paging",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"try {\r",
							"    pm.test(\"Test results\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"        const statusCode = pm.response.code;\r",
							"        pm.test(\"Status code: \" + statusCode, function () {\r",
							"            pm.expect(statusCode).to.equal(200);\r",
							"        });\r",
							"    });\r",
							"} catch (error) {\r",
							"    pm.test(\"Test results - Error\", function () {\r",
							"        throw new Error(\"Error: \" + error.message);\r",
							"    });\r",
							"}\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"    var expectedProductCount = 100;\r",
							"\r",
							"    pm.test(`Number of products is ${expectedProductCount}`, function () {\r",
							"        pm.expect(jsonData.length).to.equal(expectedProductCount);\r",
							"    });\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "eyJraWQiOiJQeVpUOWtTZ29INlNSUURBMmFKQkZwUFJ1UEhkY3hwVjc1UWlrYUhIblNnPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI0aHBmaWM3cXIxNHFxOXUxaHR0aThlbnJldiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXBpYXV0aGlkZW50aWZpZXJcL2pzb24ucmVhZCIsImF1dGhfdGltZSI6MTY4MDU5ODg1NCwiaXNzIjoiaHR0cHM6XC9cL2NvZ25pdG8taWRwLnVzLXdlc3QtMi5hbWF6b25hd3MuY29tXC91cy13ZXN0LTJfcWZWYWRhalA2IiwiZXhwIjoxNjgwNjAyNDU0LCJpYXQiOjE2ODA1OTg4NTQsInZlcnNpb24iOjIsImp0aSI6ImE1ZDgxYzY0LWM0NDQtNDBkYS1hZDIxLTc4NGYyNjAxY2M0YiIsImNsaWVudF9pZCI6IjRocGZpYzdxcjE0cXE5dTFodHRpOGVucmV2In0.XW_JT8H_h7Bt1WeTiBS1mf8lz8ZZsO75T3VNN1OQE8JwnG7tZR6aAV3lZGXQJVQn6zV9MTC0_VOqderKaXqUR5PkktSbyV-J3_hqtrZVuzL5Y5m0Z7FESYKQBMSkp17mzKtwEPyUGa3i5QVYVWDOJXHvLg8IbmxSkXXHdma7vjgJWM1WCtnVh-FkjmQ_KFke9_yoJxT53cVwWhpIRsYXu1F-8PHQf-U0gAHZW_zjANErZ7tbpUqXyEf1tF0ZYN8-Xa3Rg-vrtt1Kchd5N7XUZQytHPEsIHke3W604jUIZLtztkixYZUlowUP56P6G2s4L9SGi_ZWNzR8J3oLbqGqCQ",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://6f05mslpff.execute-api.us-west-2.amazonaws.com/dev/gilda/sites/",
					"protocol": "https",
					"host": [
						"6f05mslpff",
						"execute-api",
						"us-west-2",
						"amazonaws",
						"com"
					],
					"path": [
						"dev",
						"gilda",
						"sites",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "GILDA Sites With Search",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"try {\r",
							"    pm.test(\"Test results\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"        const statusCode = pm.response.code;\r",
							"        pm.test(\"Status code: \" + statusCode, function () {\r",
							"            pm.expect(statusCode).to.equal(200);\r",
							"        });\r",
							"    });\r",
							"} catch (error) {\r",
							"    pm.test(\"Test results - Error\", function () {\r",
							"        throw new Error(\"Error: \" + error.message);\r",
							"    });\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "eyJraWQiOiJQeVpUOWtTZ29INlNSUURBMmFKQkZwUFJ1UEhkY3hwVjc1UWlrYUhIblNnPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI0aHBmaWM3cXIxNHFxOXUxaHR0aThlbnJldiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXBpYXV0aGlkZW50aWZpZXJcL2pzb24ucmVhZCIsImF1dGhfdGltZSI6MTY4MDYxMjQwMSwiaXNzIjoiaHR0cHM6XC9cL2NvZ25pdG8taWRwLnVzLXdlc3QtMi5hbWF6b25hd3MuY29tXC91cy13ZXN0LTJfcWZWYWRhalA2IiwiZXhwIjoxNjgwNjE2MDAxLCJpYXQiOjE2ODA2MTI0MDEsInZlcnNpb24iOjIsImp0aSI6ImFhMWQ2ZTEwLTVlYmEtNDJmYS1hOTUyLTFjZDY0MTEzOTgxYyIsImNsaWVudF9pZCI6IjRocGZpYzdxcjE0cXE5dTFodHRpOGVucmV2In0.yPxdxL8u_iP6VGFSPXsUvc1FeJVSCHPOi0gpIAeIr0t_hygdLMP_Y_nvEYfPu2Uxy5ZVkJjwIpLBn1lp5-2sKKzEYOjAW65lGoieuw_2QI_bzUHazYSCEVdvZ4-vD8qfx6fiFvLcAUCymfkOc2LqQZ162u3Np59c1u7GBvYZ1MCN4M15iEzD8Nima_ZnUoryG6AvsOXjfv4jZQ9U4Y85a7k1NlZd3sD8M7_sWX9NRBjpqTCH8QKba0f_Gr8Jkkq0xzNstDnFFmi2PCpsr1IpTHeNTjCUxFcp_gH_schekL5ylJQT5d76aXdwTOQvZojyH6mEwJCForRRwmddUVRCxQ",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://6f05mslpff.execute-api.us-west-2.amazonaws.com/dev/gilda/sites?page_size=20&page_number=1&search={{site_search}}",
					"protocol": "https",
					"host": [
						"6f05mslpff",
						"execute-api",
						"us-west-2",
						"amazonaws",
						"com"
					],
					"path": [
						"dev",
						"gilda",
						"sites"
					],
					"query": [
						{
							"key": "page_size",
							"value": "20"
						},
						{
							"key": "page_number",
							"value": "1"
						},
						{
							"key": "search",
							"value": "{{site_search}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GILDA Sites With Invalid Search and Page number",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"try {\r",
							"    pm.test(\"Test results\", function () {\r",
							"        pm.response.to.have.status(400);\r",
							"        const statusCode = pm.response.code;\r",
							"        pm.test(\"Status code: \" + statusCode, function () {\r",
							"            pm.expect(statusCode).to.equal(400);\r",
							"        });\r",
							"    });\r",
							"} catch (error) {\r",
							"    pm.test(\"Test results - Error\", function () {\r",
							"        throw new Error(\"Error: \" + error.message);\r",
							"    });\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "eyJraWQiOiJQeVpUOWtTZ29INlNSUURBMmFKQkZwUFJ1UEhkY3hwVjc1UWlrYUhIblNnPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI0aHBmaWM3cXIxNHFxOXUxaHR0aThlbnJldiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXBpYXV0aGlkZW50aWZpZXJcL2pzb24ucmVhZCIsImF1dGhfdGltZSI6MTY4MDYxMjQwMSwiaXNzIjoiaHR0cHM6XC9cL2NvZ25pdG8taWRwLnVzLXdlc3QtMi5hbWF6b25hd3MuY29tXC91cy13ZXN0LTJfcWZWYWRhalA2IiwiZXhwIjoxNjgwNjE2MDAxLCJpYXQiOjE2ODA2MTI0MDEsInZlcnNpb24iOjIsImp0aSI6ImFhMWQ2ZTEwLTVlYmEtNDJmYS1hOTUyLTFjZDY0MTEzOTgxYyIsImNsaWVudF9pZCI6IjRocGZpYzdxcjE0cXE5dTFodHRpOGVucmV2In0.yPxdxL8u_iP6VGFSPXsUvc1FeJVSCHPOi0gpIAeIr0t_hygdLMP_Y_nvEYfPu2Uxy5ZVkJjwIpLBn1lp5-2sKKzEYOjAW65lGoieuw_2QI_bzUHazYSCEVdvZ4-vD8qfx6fiFvLcAUCymfkOc2LqQZ162u3Np59c1u7GBvYZ1MCN4M15iEzD8Nima_ZnUoryG6AvsOXjfv4jZQ9U4Y85a7k1NlZd3sD8M7_sWX9NRBjpqTCH8QKba0f_Gr8Jkkq0xzNstDnFFmi2PCpsr1IpTHeNTjCUxFcp_gH_schekL5ylJQT5d76aXdwTOQvZojyH6mEwJCForRRwmddUVRCxQ",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://6f05mslpff.execute-api.us-west-2.amazonaws.com/dev/gilda/sites?page_size=20&page_number=0&search=0",
					"protocol": "https",
					"host": [
						"6f05mslpff",
						"execute-api",
						"us-west-2",
						"amazonaws",
						"com"
					],
					"path": [
						"dev",
						"gilda",
						"sites"
					],
					"query": [
						{
							"key": "page_size",
							"value": "20"
						},
						{
							"key": "page_number",
							"value": "0"
						},
						{
							"key": "search",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GILDA Sites With No Search-Default 100 records",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"try {\r",
							"    pm.test(\"Test results\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"        const statusCode = pm.response.code;\r",
							"        pm.test(\"Status code: \" + statusCode, function () {\r",
							"            pm.expect(statusCode).to.equal(200);\r",
							"        });\r",
							"    });\r",
							"} catch (error) {\r",
							"    pm.test(\"Test results - Error\", function () {\r",
							"        throw new Error(\"Error: \" + error.message);\r",
							"    });\r",
							"}\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"    var expectedProductCount = 100;\r",
							"\r",
							"    pm.test(`Number of displayed products is ${expectedProductCount}`, function () {\r",
							"        pm.expect(jsonData.length).to.equal(expectedProductCount);\r",
							"    });\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "eyJraWQiOiJQeVpUOWtTZ29INlNSUURBMmFKQkZwUFJ1UEhkY3hwVjc1UWlrYUhIblNnPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI0aHBmaWM3cXIxNHFxOXUxaHR0aThlbnJldiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXBpYXV0aGlkZW50aWZpZXJcL2pzb24ucmVhZCIsImF1dGhfdGltZSI6MTY4MDYxMjQwMSwiaXNzIjoiaHR0cHM6XC9cL2NvZ25pdG8taWRwLnVzLXdlc3QtMi5hbWF6b25hd3MuY29tXC91cy13ZXN0LTJfcWZWYWRhalA2IiwiZXhwIjoxNjgwNjE2MDAxLCJpYXQiOjE2ODA2MTI0MDEsInZlcnNpb24iOjIsImp0aSI6ImFhMWQ2ZTEwLTVlYmEtNDJmYS1hOTUyLTFjZDY0MTEzOTgxYyIsImNsaWVudF9pZCI6IjRocGZpYzdxcjE0cXE5dTFodHRpOGVucmV2In0.yPxdxL8u_iP6VGFSPXsUvc1FeJVSCHPOi0gpIAeIr0t_hygdLMP_Y_nvEYfPu2Uxy5ZVkJjwIpLBn1lp5-2sKKzEYOjAW65lGoieuw_2QI_bzUHazYSCEVdvZ4-vD8qfx6fiFvLcAUCymfkOc2LqQZ162u3Np59c1u7GBvYZ1MCN4M15iEzD8Nima_ZnUoryG6AvsOXjfv4jZQ9U4Y85a7k1NlZd3sD8M7_sWX9NRBjpqTCH8QKba0f_Gr8Jkkq0xzNstDnFFmi2PCpsr1IpTHeNTjCUxFcp_gH_schekL5ylJQT5d76aXdwTOQvZojyH6mEwJCForRRwmddUVRCxQ",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://6f05mslpff.execute-api.us-west-2.amazonaws.com/dev/gilda/sites?page_size=20&page_number=0",
					"protocol": "https",
					"host": [
						"6f05mslpff",
						"execute-api",
						"us-west-2",
						"amazonaws",
						"com"
					],
					"path": [
						"dev",
						"gilda",
						"sites"
					],
					"query": [
						{
							"key": "page_size",
							"value": "20"
						},
						{
							"key": "page_number",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GILDA Protocols With Paging",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"try {\r",
							"\r",
							"        const statusCode = pm.response.code;\r",
							"        pm.test(\"Status code: \" + statusCode, function () {\r",
							"            pm.expect(statusCode).to.equal(200);\r",
							"        });\r",
							"\r",
							"} catch (error) {\r",
							"    pm.test(\"Test results - Error\", function () {\r",
							"        throw new Error(\"Error: \" + error.message);\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://6f05mslpff.execute-api.us-west-2.amazonaws.com/dev/gilda/protocols?page_size=2&page_number=5",
					"protocol": "https",
					"host": [
						"6f05mslpff",
						"execute-api",
						"us-west-2",
						"amazonaws",
						"com"
					],
					"path": [
						"dev",
						"gilda",
						"protocols"
					],
					"query": [
						{
							"key": "page_size",
							"value": "2"
						},
						{
							"key": "page_number",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GILDA Protocols With Search",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"try {\r",
							"\r",
							"        const statusCode = pm.response.code;\r",
							"        pm.test(\"Status code: \" + statusCode, function () {\r",
							"            pm.expect(statusCode).to.equal(200);\r",
							"        });\r",
							"\r",
							"} catch (error) {\r",
							"    pm.test(\"Test results - Error\", function () {\r",
							"        throw new Error(\"Error: \" + error.message);\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "eyJraWQiOiJQeVpUOWtTZ29INlNSUURBMmFKQkZwUFJ1UEhkY3hwVjc1UWlrYUhIblNnPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI0aHBmaWM3cXIxNHFxOXUxaHR0aThlbnJldiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXBpYXV0aGlkZW50aWZpZXJcL2pzb24ucmVhZCIsImF1dGhfdGltZSI6MTY4MDYxMjQwMSwiaXNzIjoiaHR0cHM6XC9cL2NvZ25pdG8taWRwLnVzLXdlc3QtMi5hbWF6b25hd3MuY29tXC91cy13ZXN0LTJfcWZWYWRhalA2IiwiZXhwIjoxNjgwNjE2MDAxLCJpYXQiOjE2ODA2MTI0MDEsInZlcnNpb24iOjIsImp0aSI6ImFhMWQ2ZTEwLTVlYmEtNDJmYS1hOTUyLTFjZDY0MTEzOTgxYyIsImNsaWVudF9pZCI6IjRocGZpYzdxcjE0cXE5dTFodHRpOGVucmV2In0.yPxdxL8u_iP6VGFSPXsUvc1FeJVSCHPOi0gpIAeIr0t_hygdLMP_Y_nvEYfPu2Uxy5ZVkJjwIpLBn1lp5-2sKKzEYOjAW65lGoieuw_2QI_bzUHazYSCEVdvZ4-vD8qfx6fiFvLcAUCymfkOc2LqQZ162u3Np59c1u7GBvYZ1MCN4M15iEzD8Nima_ZnUoryG6AvsOXjfv4jZQ9U4Y85a7k1NlZd3sD8M7_sWX9NRBjpqTCH8QKba0f_Gr8Jkkq0xzNstDnFFmi2PCpsr1IpTHeNTjCUxFcp_gH_schekL5ylJQT5d76aXdwTOQvZojyH6mEwJCForRRwmddUVRCxQ",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "https://6f05mslpff.execute-api.us-west-2.amazonaws.com/dev/gilda/protocols?page_size=20&page_number=1&search={{protocol_search}}",
					"protocol": "https",
					"host": [
						"6f05mslpff",
						"execute-api",
						"us-west-2",
						"amazonaws",
						"com"
					],
					"path": [
						"dev",
						"gilda",
						"protocols"
					],
					"query": [
						{
							"key": "page_size",
							"value": "20"
						},
						{
							"key": "page_number",
							"value": "1"
						},
						{
							"key": "search",
							"value": "{{protocol_search}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GILDA Product With Search",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "eyJraWQiOiJQeVpUOWtTZ29INlNSUURBMmFKQkZwUFJ1UEhkY3hwVjc1UWlrYUhIblNnPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI0aHBmaWM3cXIxNHFxOXUxaHR0aThlbnJldiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXBpYXV0aGlkZW50aWZpZXJcL2pzb24ucmVhZCIsImF1dGhfdGltZSI6MTY4MDYxMjQwMSwiaXNzIjoiaHR0cHM6XC9cL2NvZ25pdG8taWRwLnVzLXdlc3QtMi5hbWF6b25hd3MuY29tXC91cy13ZXN0LTJfcWZWYWRhalA2IiwiZXhwIjoxNjgwNjE2MDAxLCJpYXQiOjE2ODA2MTI0MDEsInZlcnNpb24iOjIsImp0aSI6ImFhMWQ2ZTEwLTVlYmEtNDJmYS1hOTUyLTFjZDY0MTEzOTgxYyIsImNsaWVudF9pZCI6IjRocGZpYzdxcjE0cXE5dTFodHRpOGVucmV2In0.yPxdxL8u_iP6VGFSPXsUvc1FeJVSCHPOi0gpIAeIr0t_hygdLMP_Y_nvEYfPu2Uxy5ZVkJjwIpLBn1lp5-2sKKzEYOjAW65lGoieuw_2QI_bzUHazYSCEVdvZ4-vD8qfx6fiFvLcAUCymfkOc2LqQZ162u3Np59c1u7GBvYZ1MCN4M15iEzD8Nima_ZnUoryG6AvsOXjfv4jZQ9U4Y85a7k1NlZd3sD8M7_sWX9NRBjpqTCH8QKba0f_Gr8Jkkq0xzNstDnFFmi2PCpsr1IpTHeNTjCUxFcp_gH_schekL5ylJQT5d76aXdwTOQvZojyH6mEwJCForRRwmddUVRCxQ",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://6f05mslpff.execute-api.us-west-2.amazonaws.com/dev/gilda/products?page_size=20&page_number=2&search={{product_search}}",
					"protocol": "https",
					"host": [
						"6f05mslpff",
						"execute-api",
						"us-west-2",
						"amazonaws",
						"com"
					],
					"path": [
						"dev",
						"gilda",
						"products"
					],
					"query": [
						{
							"key": "page_size",
							"value": "20"
						},
						{
							"key": "page_number",
							"value": "2"
						},
						{
							"key": "search",
							"value": "{{product_search}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Generate Access Token-Dev",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has a JSON body\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response has an access_token property\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.access_token).to.be.a('string');\r",
							"});\r",
							"\r",
							"var data = pm.response.json();\r",
							"pm.environment.set(\"access_token\", data.access_token);\r",
							"\r",
							"tests[\"status code is 200\"] = responseCode.code == 200;\r",
							"\r",
							"pm.test(\"Access Token\", function () {\r",
							"    var accessToken = pm.environment.get(\"access_token\");\r",
							"    pm.expect(accessToken).to.exist;\r",
							"    pm.expect(accessToken).to.be.a(\"string\");\r",
							"    pm.test(\"Access Token Value: \" + accessToken);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Basic MTBrbHI5b3Z0YTBpMWZubDMwcnIwNHRqOW86MXFuY3E1MnJqYnVzazNicm8ydG1xY3J2ZmI5NDN1MzFjMnRpcXU1NGczcTFkOTZrZGNscg==",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://default-ds-masterapi-dev.auth.us-west-2.amazoncognito.com/oauth2/token?grant_type=client_credentials",
					"protocol": "https",
					"host": [
						"default-ds-masterapi-dev",
						"auth",
						"us-west-2",
						"amazoncognito",
						"com"
					],
					"path": [
						"oauth2",
						"token"
					],
					"query": [
						{
							"key": "grant_type",
							"value": "client_credentials"
						},
						{
							"key": "client_id",
							"value": "4surrtkle8ig54jf2b7om50j5g",
							"disabled": true
						},
						{
							"key": "scope",
							"value": "gilda-apis/products.read",
							"disabled": true
						},
						{
							"key": "scope",
							"value": "gilda-apis/protocols.read",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GILDA Sites By Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Parse the JSON response\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// Get the expected ADDRESS1 from the CSV file\r",
							"var expectedADDRESS1 = pm.iterationData.get('ADDRESS1', { sheet: 'Sites' });\r",
							"\r",
							"// Get the actual ADDRESS1 from the JSON response\r",
							"var actualADDRESS1 = jsonData.ADDRESS1;\r",
							"\r",
							"console.log('Expected ADDRESS1:', expectedADDRESS1);\r",
							"console.log('Actual ADDRESS1 from Response:', actualADDRESS1);\r",
							"\r",
							"// Compare the actual and expected ADDRESS1 values\r",
							"pm.test(\"ADDRESS1 value matches the expected value\", function () {\r",
							"    pm.expect(actualADDRESS1).to.equal(expectedADDRESS1);\r",
							"});\r",
							"\r",
							"///////////// ADDRESS2 /////////////////\r",
							"// Get the expected ADDRESS2 from the CSV file\r",
							"var expectedADDRESS2 = pm.iterationData.get('ADDRESS2', { sheet: 'Sites' });\r",
							"\r",
							"// Get the actual ADDRESS2 from the JSON response\r",
							"var actualADDRESS2 = jsonData.ADDRESS2;\r",
							"\r",
							"console.log('Expected ADDRESS2:', expectedADDRESS2);\r",
							"console.log('Actual ADDRESS2 from Response:', actualADDRESS2);\r",
							"\r",
							"// Compare the actual and expected ADDRESS2 values\r",
							"pm.test(\"ADDRESS2 value matches the expected value\", function () {\r",
							"    pm.expect(actualADDRESS2).to.equal(expectedADDRESS2);\r",
							"});\r",
							"///////////// CITY /////////////////\r",
							"// Get the expected CITY from the CSV file\r",
							"var expectedCITY = pm.iterationData.get('CITY', { sheet: 'Sites' });\r",
							"\r",
							"// Get the actual CITY from the JSON response\r",
							"var actualCITY = jsonData.CITY;\r",
							"\r",
							"console.log('Expected CITY:', expectedCITY);\r",
							"console.log('Actual CITY from Response:', actualCITY);\r",
							"\r",
							"// Compare the actual and expected CITY values\r",
							"pm.test(\"CITY value matches the expected value\", function () {\r",
							"    pm.expect(actualCITY).to.equal(expectedCITY);\r",
							"});\r",
							"///////////// CONTRACT_STATUS /////////////////\r",
							"// Get the expected CONTRACT_STATUS from the CSV file\r",
							"var expectedCONTRACT_STATUS = pm.iterationData.get('CONTRACT_STATUS', { sheet: 'Sites' });\r",
							"\r",
							"// Get the actual CONTRACT_STATUS from the JSON response\r",
							"var actualCONTRACT_STATUS = jsonData.CONTRACT_STATUS;\r",
							"\r",
							"console.log('Expected CONTRACT_STATUS:', expectedCONTRACT_STATUS);\r",
							"console.log('Actual CONTRACT_STATUS from Response:', actualCONTRACT_STATUS);\r",
							"\r",
							"// Compare the actual and expected CONTRACT_STATUS values\r",
							"pm.test(\"CONTRACT_STATUS value matches the expected value\", function () {\r",
							"    pm.expect(actualCONTRACT_STATUS).to.equal(expectedCONTRACT_STATUS);\r",
							"});\r",
							"///////////// COUNTRY /////////////////\r",
							"// Get the expected COUNTRY from the CSV file\r",
							"var expectedCOUNTRY = pm.iterationData.get('COUNTRY', { sheet: 'Sites' });\r",
							"\r",
							"// Get the actual COUNTRY from the JSON response\r",
							"var actualCOUNTRY = jsonData.COUNTRY;\r",
							"\r",
							"console.log('Expected COUNTRY:', expectedCOUNTRY);\r",
							"console.log('Actual COUNTRY from Response:', actualCOUNTRY);\r",
							"\r",
							"// Compare the actual and expected COUNTRY values\r",
							"pm.test(\"COUNTRY value matches the expected value\", function () {\r",
							"    pm.expect(actualCOUNTRY).to.equal(expectedCOUNTRY);\r",
							"});\r",
							"///////////// ID /////////////////\r",
							"// Get the expected ID from the CSV file\r",
							"var expectedID = pm.iterationData.get('ID', { sheet: 'Sites' });\r",
							"\r",
							"// Get the actual ID from the JSON response\r",
							"var actualID = jsonData.ID;\r",
							"\r",
							"console.log('Expected ID:', expectedID);\r",
							"console.log('Actual ID from Response:', actualID);\r",
							"\r",
							"// Compare the actual and expected ID values\r",
							"pm.test(\"ID value matches the expected value\", function () {\r",
							"    pm.expect(actualID).to.equal(expectedID);\r",
							"});\r",
							"///////////// INSTITUTION /////////////////\r",
							"// Get the expected INSTITUTION from the CSV file\r",
							"var expectedINSTITUTION = pm.iterationData.get('INSTITUTION', { sheet: 'Sites' });\r",
							"\r",
							"// Get the actual INSTITUTION from the JSON response\r",
							"var actualINSTITUTION = jsonData.INSTITUTION;\r",
							"\r",
							"console.log('Expected INSTITUTION:', expectedINSTITUTION);\r",
							"console.log('Actual INSTITUTION from Response:', actualINSTITUTION);\r",
							"\r",
							"// Compare the actual and expected INSTITUTION values\r",
							"pm.test(\"INSTITUTION value matches the expected value\", function () {\r",
							"    pm.expect(actualINSTITUTION).to.equal(expectedINSTITUTION);\r",
							"});\r",
							"///////////// MOBILE_PHONE /////////////////\r",
							"// Get the expected MOBILE_PHONE from the CSV file\r",
							"var expectedMOBILE_PHONE = pm.iterationData.get('MOBILE_PHONE', { sheet: 'Sites' });\r",
							"\r",
							"// Get the actual MOBILE_PHONE from the JSON response\r",
							"var actualMOBILE_PHONE = jsonData.MOBILE_PHONE;\r",
							"\r",
							"console.log('Expected MOBILE_PHONE:', expectedMOBILE_PHONE);\r",
							"console.log('Actual MOBILE_PHONE from Response:', actualMOBILE_PHONE);\r",
							"\r",
							"// Compare the actual and expected MOBILE_PHONE values\r",
							"pm.test(\"MOBILE_PHONE value matches the expected value\", function () {\r",
							"    pm.expect(actualMOBILE_PHONE).to.equal(expectedMOBILE_PHONE);\r",
							"});\r",
							"///////////// NUM_SUBJ_ENRL /////////////////\r",
							"// Get the expected NUM_SUBJ_ENRL from the CSV file\r",
							"var expectedNUM_SUBJ_ENRL = pm.iterationData.get('NUM_SUBJ_ENRL', { sheet: 'Sites' });\r",
							"\r",
							"// Get the actual NUM_SUBJ_ENRL from the JSON response\r",
							"var actualNUM_SUBJ_ENRL = jsonData.NUM_SUBJ_ENRL;\r",
							"\r",
							"console.log('Expected NUM_SUBJ_ENRL:', expectedNUM_SUBJ_ENRL);\r",
							"console.log('Actual NUM_SUBJ_ENRL from Response:', actualNUM_SUBJ_ENRL);\r",
							"\r",
							"// Compare the actual and expected NUM_SUBJ_ENRL values\r",
							"pm.test(\"NUM_SUBJ_ENRL value matches the expected value\", function () {\r",
							"    pm.expect(actualNUM_SUBJ_ENRL).to.equal(expectedNUM_SUBJ_ENRL);\r",
							"});\r",
							"///////////// NUM_SUBJ_SCRN /////////////////\r",
							"// Get the expected NUM_SUBJ_SCRN from the CSV file\r",
							"var expectedNUM_SUBJ_SCRN = pm.iterationData.get('NUM_SUBJ_SCRN', { sheet: 'Sites' });\r",
							"\r",
							"// Get the actual NUM_SUBJ_SCRN from the JSON response\r",
							"var actualNUM_SUBJ_SCRN = jsonData.NUM_SUBJ_SCRN;\r",
							"\r",
							"console.log('Expected NUM_SUBJ_SCRN:', expectedNUM_SUBJ_SCRN);\r",
							"console.log('Actual NUM_SUBJ_SCRN from Response:', actualNUM_SUBJ_SCRN);\r",
							"\r",
							"// Compare the actual and expected NUM_SUBJ_SCRN values\r",
							"pm.test(\"NUM_SUBJ_SCRN value matches the expected value\", function () {\r",
							"    pm.expect(actualNUM_SUBJ_SCRN).to.equal(expectedNUM_SUBJ_SCRN);\r",
							"});\r",
							"///////////// PI_EMAIL /////////////////\r",
							"// Get the expected PI_EMAIL from the CSV file\r",
							"var expectedPI_EMAIL = pm.iterationData.get('PI_EMAIL', { sheet: 'Sites' });\r",
							"\r",
							"// Get the actual PI_EMAIL from the JSON response\r",
							"var actualPI_EMAIL = jsonData.PI_EMAIL;\r",
							"\r",
							"console.log('Expected PI_EMAIL:', expectedPI_EMAIL);\r",
							"console.log('Actual PI_EMAIL from Response:', actualPI_EMAIL);\r",
							"\r",
							"// Compare the actual and expected PI_EMAIL values\r",
							"pm.test(\"PI_EMAIL value matches the expected value\", function () {\r",
							"    pm.expect(actualPI_EMAIL).to.equal(expectedPI_EMAIL);\r",
							"});\r",
							"///////////// PI_FIRSTNAME /////////////////\r",
							"// Get the expected PI_FIRSTNAME from the CSV file\r",
							"var expectedPI_FIRSTNAME = pm.iterationData.get('PI_FIRSTNAME', { sheet: 'Sites' });\r",
							"\r",
							"// Get the actual PI_FIRSTNAME from the JSON response\r",
							"var actualPI_FIRSTNAME = jsonData.PI_FIRSTNAME;\r",
							"\r",
							"console.log('Expected PI_FIRSTNAME:', expectedPI_FIRSTNAME);\r",
							"console.log('Actual PI_FIRSTNAME from Response:', actualPI_FIRSTNAME);\r",
							"\r",
							"// Compare the actual and expected PI_FIRSTNAME values\r",
							"pm.test(\"PI_FIRSTNAME value matches the expected value\", function () {\r",
							"    pm.expect(actualPI_FIRSTNAME).to.equal(expectedPI_FIRSTNAME);\r",
							"});\r",
							"///////////// PI_LASTNAME /////////////////\r",
							"// Get the expected PI_LASTNAME from the CSV file\r",
							"var expectedPI_LASTNAME = pm.iterationData.get('PI_LASTNAME', { sheet: 'Sites' });\r",
							"\r",
							"// Get the actual PI_LASTNAME from the JSON response\r",
							"var actualPI_LASTNAME = jsonData.PI_LASTNAME;\r",
							"\r",
							"console.log('Expected PI_LASTNAME:', expectedPI_LASTNAME);\r",
							"console.log('Actual PI_LASTNAME from Response:', actualPI_LASTNAME);\r",
							"\r",
							"// Compare the actual and expected PI_LASTNAME values\r",
							"pm.test(\"PI_LASTNAME value matches the expected value\", function () {\r",
							"    pm.expect(actualPI_LASTNAME).to.equal(expectedPI_LASTNAME);\r",
							"});\r",
							"///////////// PI_NUMBER /////////////////\r",
							"// Get the expected PI_NUMBER from the CSV file\r",
							"var expectedPI_NUMBER = pm.iterationData.get('PI_NUMBER', { sheet: 'Sites' });\r",
							"\r",
							"// Get the actual PI_NUMBER from the JSON response\r",
							"var actualPI_NUMBER = jsonData.PI_NUMBER;\r",
							"\r",
							"console.log('Expected PI_NUMBER:', expectedPI_NUMBER);\r",
							"console.log('Actual PI_NUMBER from Response:', actualPI_NUMBER);\r",
							"\r",
							"// Compare the actual and expected PI_NUMBER values\r",
							"pm.test(\"PI_NUMBER value matches the expected value\", function () {\r",
							"    pm.expect(actualPI_NUMBER).to.equal(expectedPI_NUMBER);\r",
							"});\r",
							"///////////// POSTAL_CODE /////////////////\r",
							"// Get the expected POSTAL_CODE from the CSV file\r",
							"var expectedPOSTAL_CODE = pm.iterationData.get('POSTAL_CODE', { sheet: 'Sites' });\r",
							"\r",
							"// Get the actual POSTAL_CODE from the JSON response\r",
							"var actualPOSTAL_CODE = jsonData.POSTAL_CODE;\r",
							"\r",
							"console.log('Expected POSTAL_CODE:', expectedPOSTAL_CODE);\r",
							"console.log('Actual POSTAL_CODE from Response:', actualPOSTAL_CODE);\r",
							"\r",
							"// Compare the actual and expected POSTAL_CODE values\r",
							"pm.test(\"POSTAL_CODE value matches the expected value\", function () {\r",
							"    pm.expect(actualPOSTAL_CODE).to.equal(expectedPOSTAL_CODE);\r",
							"});\r",
							"\r",
							"///////////// PRIMARY_PHONE /////////////////\r",
							"// Get the expected PRIMARY_PHONE from the CSV file\r",
							"var expectedPRIMARY_PHONE = pm.iterationData.get('PRIMARY_PHONE', { sheet: 'Sites' });\r",
							"\r",
							"// Get the actual PRIMARY_PHONE from the JSON response\r",
							"var actualPRIMARY_PHONE = jsonData.PRIMARY_PHONE;\r",
							"\r",
							"console.log('Expected PRIMARY_PHONE:', expectedPRIMARY_PHONE);\r",
							"console.log('Actual PRIMARY_PHONE from Response:', actualPRIMARY_PHONE);\r",
							"\r",
							"// Compare the actual and expected PRIMARY_PHONE values\r",
							"pm.test(\"PRIMARY_PHONE value matches the expected value\", function () {\r",
							"    pm.expect(actualPRIMARY_PHONE).to.equal(expectedPRIMARY_PHONE);\r",
							"});\r",
							"///////////// PROTOCOL_NUMBER /////////////////\r",
							"// Get the expected PROTOCOL_NUMBER from the CSV file\r",
							"var expectedPROTOCOL_NUMBER = pm.iterationData.get('PROTOCOL_NUMBER', { sheet: 'Sites' });\r",
							"\r",
							"// Get the actual PROTOCOL_NUMBER from the JSON response\r",
							"var actualPROTOCOL_NUMBER = jsonData.PROTOCOL_NUMBER;\r",
							"\r",
							"console.log('Expected PROTOCOL_NUMBER:', expectedPROTOCOL_NUMBER);\r",
							"console.log('Actual PROTOCOL_NUMBER from Response:', actualPROTOCOL_NUMBER);\r",
							"\r",
							"// Compare the actual and expected PROTOCOL_NUMBER values\r",
							"pm.test(\"PROTOCOL_NUMBER value matches the expected value\", function () {\r",
							"    pm.expect(actualPROTOCOL_NUMBER).to.equal(expectedPROTOCOL_NUMBER);\r",
							"});\r",
							"///////////// REG_DOC_STATUS /////////////////\r",
							"// Get the expected REG_DOC_STATUS from the CSV file\r",
							"var expectedREG_DOC_STATUS = pm.iterationData.get('REG_DOC_STATUS', { sheet: 'Sites' });\r",
							"\r",
							"// Get the actual REG_DOC_STATUS from the JSON response\r",
							"var actualREG_DOC_STATUS = jsonData.REG_DOC_STATUS;\r",
							"\r",
							"console.log('Expected REG_DOC_STATUS:', expectedREG_DOC_STATUS);\r",
							"console.log('Actual REG_DOC_STATUS from Response:', actualREG_DOC_STATUS);\r",
							"\r",
							"// Compare the actual and expected REG_DOC_STATUS values\r",
							"pm.test(\"REG_DOC_STATUS value matches the expected value\", function () {\r",
							"    pm.expect(actualREG_DOC_STATUS).to.equal(expectedREG_DOC_STATUS);\r",
							"});\r",
							"///////////// SITE_ACTIVATION_DATE /////////////////\r",
							"// Get the expected SITE_ACTIVATION_DATE from the CSV file\r",
							"var expectedSITE_ACTIVATION_DATE = pm.iterationData.get('SITE_ACTIVATION_DATE', { sheet: 'Sites' });\r",
							"\r",
							"// Get the actual SITE_ACTIVATION_DATE from the JSON response\r",
							"var actualSITE_ACTIVATION_DATE = jsonData.SITE_ACTIVATION_DATE;\r",
							"\r",
							"console.log('Expected SITE_ACTIVATION_DATE:', expectedSITE_ACTIVATION_DATE);\r",
							"console.log('Actual SITE_ACTIVATION_DATE from Response:', actualSITE_ACTIVATION_DATE);\r",
							"\r",
							"// Compare the actual and expected SITE_ACTIVATION_DATE values\r",
							"pm.test(\"SITE_ACTIVATION_DATE value matches the expected value\", function () {\r",
							"    pm.expect(actualSITE_ACTIVATION_DATE).to.equal(expectedSITE_ACTIVATION_DATE);\r",
							"});\r",
							"///////////// SITE_CLOSE_DATE /////////////////\r",
							"// Get the expected SITE_CLOSE_DATE from the CSV file\r",
							"var expectedSITE_CLOSE_DATE = pm.iterationData.get('SITE_CLOSE_DATE', { sheet: 'Sites' });\r",
							"\r",
							"// Get the actual SITE_CLOSE_DATE from the JSON response\r",
							"var actualSITE_CLOSE_DATE = jsonData.SITE_CLOSE_DATE;\r",
							"\r",
							"console.log('Expected SITE_CLOSE_DATE:', expectedSITE_CLOSE_DATE);\r",
							"console.log('Actual SITE_CLOSE_DATE from Response:', actualSITE_CLOSE_DATE);\r",
							"\r",
							"// Compare the actual and expected SITE_CLOSE_DATE values\r",
							"pm.test(\"SITE_CLOSE_DATE value matches the expected value\", function () {\r",
							"    pm.expect(actualSITE_CLOSE_DATE).to.equal(expectedSITE_CLOSE_DATE);\r",
							"});\r",
							"///////////// SITE_ID /////////////////\r",
							"// Get the expected SITE_ID from the CSV file\r",
							"var expectedSITE_ID = pm.iterationData.get('SITE_ID', { sheet: 'Sites' });\r",
							"\r",
							"// Get the actual SITE_ID from the JSON response\r",
							"var actualSITE_ID = jsonData.SITE_ID;\r",
							"\r",
							"console.log('Expected SITE_ID:', expectedSITE_ID);\r",
							"console.log('Actual SITE_ID from Response:', actualSITE_ID);\r",
							"\r",
							"// Compare the actual and expected SITE_ID values\r",
							"pm.test(\"SITE_ID value matches the expected value\", function () {\r",
							"    pm.expect(actualSITE_ID).to.equal(expectedSITE_ID);\r",
							"});\r",
							"///////////// SITE_NUMBER /////////////////\r",
							"// Get the expected SITE_NUMBER from the CSV file\r",
							"var expectedSITE_NUMBER = pm.iterationData.get('SITE_NUMBER', { sheet: 'Sites' });\r",
							"\r",
							"// Get the actual SITE_NUMBER from the JSON response\r",
							"var actualSITE_NUMBER = jsonData.SITE_NUMBER;\r",
							"\r",
							"console.log('Expected SITE_NUMBER:', expectedSITE_NUMBER);\r",
							"console.log('Actual SITE_NUMBER from Response:', actualSITE_NUMBER);\r",
							"\r",
							"// Compare the actual and expected SITE_NUMBER values\r",
							"pm.test(\"SITE_NUMBER value matches the expected value\", function () {\r",
							"    pm.expect(actualSITE_NUMBER).to.equal(expectedSITE_NUMBER);\r",
							"});\r",
							"///////////// SITE_STATUS /////////////////\r",
							"// Get the expected SITE_STATUS from the CSV file\r",
							"var expectedSITE_STATUS = pm.iterationData.get('SITE_STATUS', { sheet: 'Sites' });\r",
							"\r",
							"// Get the actual SITE_STATUS from the JSON response\r",
							"var actualSITE_STATUS = jsonData.SITE_STATUS;\r",
							"\r",
							"console.log('Expected SITE_STATUS:', expectedSITE_STATUS);\r",
							"console.log('Actual SITE_STATUS from Response:', actualSITE_STATUS);\r",
							"\r",
							"// Compare the actual and expected SITE_STATUS values\r",
							"pm.test(\"SITE_STATUS value matches the expected value\", function () {\r",
							"    pm.expect(actualSITE_STATUS).to.equal(expectedSITE_STATUS);\r",
							"});\r",
							"///////////// STATE /////////////////\r",
							"// Get the expected STATE from the CSV file\r",
							"var expectedSTATE = pm.iterationData.get('STATE', { sheet: 'Sites' });\r",
							"\r",
							"// Get the actual STATE from the JSON response\r",
							"var actualSTATE = jsonData.STATE;\r",
							"\r",
							"console.log('Expected STATE:', expectedSTATE);\r",
							"console.log('Actual STATE from Response:', actualSTATE);\r",
							"\r",
							"// Compare the actual and expected STATE values\r",
							"pm.test(\"STATE value matches the expected value\", function () {\r",
							"    pm.expect(actualSTATE).to.equal(expectedSTATE);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{dev_access_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://7s49c233oh.execute-api.us-west-2.amazonaws.com/dev/gilda/sites/3",
					"protocol": "https",
					"host": [
						"7s49c233oh",
						"execute-api",
						"us-west-2",
						"amazonaws",
						"com"
					],
					"path": [
						"dev",
						"gilda",
						"sites",
						"3"
					]
				}
			},
			"response": []
		}
	]
}